// Auto generated by yangzhou
// cgltf version: 1.14

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace cgltf.NET;
	public static unsafe partial class cgltf
	{
public enum cgltf_file_type
{
    cgltf_file_type_invalid,
    cgltf_file_type_gltf,
    cgltf_file_type_glb,
    cgltf_file_type_max_enum
}
public enum cgltf_result
{
    cgltf_result_success,
    cgltf_result_data_too_short,
    cgltf_result_unknown_format,
    cgltf_result_invalid_json,
    cgltf_result_invalid_gltf,
    cgltf_result_invalid_options,
    cgltf_result_file_not_found,
    cgltf_result_io_error,
    cgltf_result_out_of_memory,
    cgltf_result_legacy_gltf,
    cgltf_result_max_enum
}
public enum cgltf_buffer_view_type
{
    cgltf_buffer_view_type_invalid,
    cgltf_buffer_view_type_indices,
    cgltf_buffer_view_type_vertices,
    cgltf_buffer_view_type_max_enum
}
public enum cgltf_attribute_type
{
    cgltf_attribute_type_invalid,
    cgltf_attribute_type_position,
    cgltf_attribute_type_normal,
    cgltf_attribute_type_tangent,
    cgltf_attribute_type_texcoord,
    cgltf_attribute_type_color,
    cgltf_attribute_type_joints,
    cgltf_attribute_type_weights,
    cgltf_attribute_type_custom,
    cgltf_attribute_type_max_enum
}
public enum cgltf_component_type
{
    cgltf_component_type_invalid,
    cgltf_component_type_r_8,
    cgltf_component_type_r_8u,
    cgltf_component_type_r_16,
    cgltf_component_type_r_16u,
    cgltf_component_type_r_32u,
    cgltf_component_type_r_32f,
    cgltf_component_type_max_enum
}
public enum cgltf_type
{
    cgltf_type_invalid,
    cgltf_type_scalar,
    cgltf_type_vec2,
    cgltf_type_vec3,
    cgltf_type_vec4,
    cgltf_type_mat2,
    cgltf_type_mat3,
    cgltf_type_mat4,
    cgltf_type_max_enum
}
public enum cgltf_primitive_type
{
    cgltf_primitive_type_invalid,
    cgltf_primitive_type_points,
    cgltf_primitive_type_lines,
    cgltf_primitive_type_line_loop,
    cgltf_primitive_type_line_strip,
    cgltf_primitive_type_triangles,
    cgltf_primitive_type_triangle_strip,
    cgltf_primitive_type_triangle_fan,
    cgltf_primitive_type_max_enum
}
public enum cgltf_alpha_mode
{
    cgltf_alpha_mode_opaque,
    cgltf_alpha_mode_mask,
    cgltf_alpha_mode_blend,
    cgltf_alpha_mode_max_enum
}
public enum cgltf_animation_path_type
{
    cgltf_animation_path_type_invalid,
    cgltf_animation_path_type_translation,
    cgltf_animation_path_type_rotation,
    cgltf_animation_path_type_scale,
    cgltf_animation_path_type_weights,
    cgltf_animation_path_type_max_enum
}
public enum cgltf_interpolation_type
{
    cgltf_interpolation_type_linear,
    cgltf_interpolation_type_step,
    cgltf_interpolation_type_cubic_spline,
    cgltf_interpolation_type_max_enum
}
public enum cgltf_camera_type
{
    cgltf_camera_type_invalid,
    cgltf_camera_type_perspective,
    cgltf_camera_type_orthographic,
    cgltf_camera_type_max_enum
}
public enum cgltf_light_type
{
    cgltf_light_type_invalid,
    cgltf_light_type_directional,
    cgltf_light_type_point,
    cgltf_light_type_spot,
    cgltf_light_type_max_enum
}
public enum cgltf_data_free_method
{
    cgltf_data_free_method_none,
    cgltf_data_free_method_file_release,
    cgltf_data_free_method_memory_free,
    cgltf_data_free_method_max_enum
}
public enum cgltf_meshopt_compression_mode
{
    cgltf_meshopt_compression_mode_invalid,
    cgltf_meshopt_compression_mode_attributes,
    cgltf_meshopt_compression_mode_triangles,
    cgltf_meshopt_compression_mode_indices,
    cgltf_meshopt_compression_mode_max_enum
}
public enum cgltf_meshopt_compression_filter
{
    cgltf_meshopt_compression_filter_none,
    cgltf_meshopt_compression_filter_octahedral,
    cgltf_meshopt_compression_filter_quaternion,
    cgltf_meshopt_compression_filter_exponential,
    cgltf_meshopt_compression_filter_max_enum
}
public enum jsmntype_t
{
    JSMN_UNDEFINED = 0,
    JSMN_OBJECT = 1,
    JSMN_ARRAY = 2,
    JSMN_STRING = 3,
    JSMN_PRIMITIVE = 4
}
public enum jsmnerr
{
    JSMN_ERROR_NOMEM = -1,
    JSMN_ERROR_INVAL = -2,
    JSMN_ERROR_PART = -3
}
public static uint GlbVersion = (uint)(2);
public static uint GlbMagic = (uint)(0x46546C67);
public static uint GlbMagicJsonChunk = (uint)(0x4E4F534A);
public static uint GlbMagicBinChunk = (uint)(0x004E4942);
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void* delegate0(void* arg0, ulong arg1);
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void delegate1(void* arg0, void* arg1);
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate cgltf_result delegate2(cgltf_memory_options* arg0, cgltf_file_options* arg1, sbyte* arg2, ulong* arg3, void** arg4);
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void delegate3(cgltf_memory_options* arg0, cgltf_file_options* arg1, void* arg2);
public unsafe struct cgltf_memory_options
{
        // 设置函数指针的方法
        public void SetAllocFunc(delegate0 allocFunc)
        {
            alloc_func = Marshal.GetFunctionPointerForDelegate(allocFunc);
        }

        public void SetFreeFunc(delegate1 freeFunc)
        {
            free_func = Marshal.GetFunctionPointerForDelegate(freeFunc);
        }

        // 调用函数指针
        public delegate0 GetAllocFunc()
        {
            return Marshal.GetDelegateForFunctionPointer<delegate0>(alloc_func);
        }

        public delegate1 GetFreeFunc()
        {
            return Marshal.GetDelegateForFunctionPointer<delegate1>(free_func);
        }
    public IntPtr alloc_func;
    public IntPtr free_func;
    public void* user_data;
}
public unsafe struct cgltf_file_options
{
        // 设置函数指针的方法
        public void SetRead(delegate2 read)
        {
            this.read = Marshal.GetFunctionPointerForDelegate(read);
        }

        public void SetRelease(delegate3 release)
        {
            this.release = Marshal.GetFunctionPointerForDelegate(release);
        }

        // 调用函数指针
        public delegate2 GetRead()
        {
            return Marshal.GetDelegateForFunctionPointer<delegate2>(read);
        }

        public delegate3 GetRelease()
        {
            return Marshal.GetDelegateForFunctionPointer<delegate3>(release);
        }
    public IntPtr read;
    public IntPtr release;
    public void* user_data;
}
public unsafe struct cgltf_options
{
    public cgltf_file_type type;
    public ulong json_token_count;
    public cgltf_memory_options memory;
    public cgltf_file_options file;
}
public unsafe struct cgltf_extras
{
    public ulong start_offset;
    public ulong end_offset;
    public sbyte* data;
}
public unsafe struct cgltf_extension
{
    public sbyte* name;
    public sbyte* data;
}
public unsafe struct cgltf_buffer
{
    public sbyte* name;
    public ulong size;
    public sbyte* uri;
    public void* data;
    public cgltf_data_free_method data_free_method;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_meshopt_compression
{
    public cgltf_buffer* buffer;
    public ulong offset;
    public ulong size;
    public ulong stride;
    public ulong count;
    public cgltf_meshopt_compression_mode mode;
    public cgltf_meshopt_compression_filter filter;
}
public unsafe struct cgltf_buffer_view
{
    public sbyte* name;
    public cgltf_buffer* buffer;
    public ulong offset;
    public ulong size;
    public ulong stride;
    public cgltf_buffer_view_type type;
    public void* data;
    public int has_meshopt_compression;
    public cgltf_meshopt_compression meshopt_compression;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_accessor_sparse
{
    public ulong count;
    public cgltf_buffer_view* indices_buffer_view;
    public ulong indices_byte_offset;
    public cgltf_component_type indices_component_type;
    public cgltf_buffer_view* values_buffer_view;
    public ulong values_byte_offset;
}
public unsafe struct cgltf_accessor
{
    public sbyte* name;
    public cgltf_component_type component_type;
    public int normalized;
    public cgltf_type type;
    public ulong offset;
    public ulong count;
    public ulong stride;
    public cgltf_buffer_view* buffer_view;
    public int has_min;
    public fixed float min[16];
    public int has_max;
    public fixed float max[16];
    public int is_sparse;
    public cgltf_accessor_sparse sparse;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_attribute
{
    public sbyte* name;
    public cgltf_attribute_type type;
    public int index;
    public cgltf_accessor* data;
}
public unsafe struct cgltf_image
{
    public sbyte* name;
    public sbyte* uri;
    public cgltf_buffer_view* buffer_view;
    public sbyte* mime_type;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_sampler
{
    public sbyte* name;
    public int mag_filter;
    public int min_filter;
    public int wrap_s;
    public int wrap_t;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_texture
{
    public sbyte* name;
    public cgltf_image* image;
    public cgltf_sampler* sampler;
    public int has_basisu;
    public cgltf_image* basisu_image;
    public int has_webp;
    public cgltf_image* webp_image;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_texture_transform
{
    public fixed float offset[2];
    public float rotation;
    public fixed float scale[2];
    public int has_texcoord;
    public int texcoord;
}
public unsafe struct cgltf_texture_view
{
    public cgltf_texture* texture;
    public int texcoord;
    public float scale;
    public int has_transform;
    public cgltf_texture_transform transform;
}
public unsafe struct cgltf_pbr_metallic_roughness
{
    public cgltf_texture_view base_color_texture;
    public cgltf_texture_view metallic_roughness_texture;
    public fixed float base_color_factor[4];
    public float metallic_factor;
    public float roughness_factor;
}
public unsafe struct cgltf_pbr_specular_glossiness
{
    public cgltf_texture_view diffuse_texture;
    public cgltf_texture_view specular_glossiness_texture;
    public fixed float diffuse_factor[4];
    public fixed float specular_factor[3];
    public float glossiness_factor;
}
public unsafe struct cgltf_clearcoat
{
    public cgltf_texture_view clearcoat_texture;
    public cgltf_texture_view clearcoat_roughness_texture;
    public cgltf_texture_view clearcoat_normal_texture;
    public float clearcoat_factor;
    public float clearcoat_roughness_factor;
}
public unsafe struct cgltf_transmission
{
    public cgltf_texture_view transmission_texture;
    public float transmission_factor;
}
public unsafe struct cgltf_ior
{
    public float ior;
}
public unsafe struct cgltf_specular
{
    public cgltf_texture_view specular_texture;
    public cgltf_texture_view specular_color_texture;
    public fixed float specular_color_factor[3];
    public float specular_factor;
}
public unsafe struct cgltf_volume
{
    public cgltf_texture_view thickness_texture;
    public float thickness_factor;
    public fixed float attenuation_color[3];
    public float attenuation_distance;
}
public unsafe struct cgltf_sheen
{
    public cgltf_texture_view sheen_color_texture;
    public fixed float sheen_color_factor[3];
    public cgltf_texture_view sheen_roughness_texture;
    public float sheen_roughness_factor;
}
public unsafe struct cgltf_emissive_strength
{
    public float emissive_strength;
}
public unsafe struct cgltf_iridescence
{
    public float iridescence_factor;
    public cgltf_texture_view iridescence_texture;
    public float iridescence_ior;
    public float iridescence_thickness_min;
    public float iridescence_thickness_max;
    public cgltf_texture_view iridescence_thickness_texture;
}
public unsafe struct cgltf_diffuse_transmission
{
    public cgltf_texture_view diffuse_transmission_texture;
    public float diffuse_transmission_factor;
    public fixed float diffuse_transmission_color_factor[3];
    public cgltf_texture_view diffuse_transmission_color_texture;
}
public unsafe struct cgltf_anisotropy
{
    public float anisotropy_strength;
    public float anisotropy_rotation;
    public cgltf_texture_view anisotropy_texture;
}
public unsafe struct cgltf_dispersion
{
    public float dispersion;
}
public unsafe struct cgltf_material
{
    public sbyte* name;
    public int has_pbr_metallic_roughness;
    public int has_pbr_specular_glossiness;
    public int has_clearcoat;
    public int has_transmission;
    public int has_volume;
    public int has_ior;
    public int has_specular;
    public int has_sheen;
    public int has_emissive_strength;
    public int has_iridescence;
    public int has_diffuse_transmission;
    public int has_anisotropy;
    public int has_dispersion;
    public cgltf_pbr_metallic_roughness pbr_metallic_roughness;
    public cgltf_pbr_specular_glossiness pbr_specular_glossiness;
    public cgltf_clearcoat clearcoat;
    public cgltf_ior ior;
    public cgltf_specular specular;
    public cgltf_sheen sheen;
    public cgltf_transmission transmission;
    public cgltf_volume volume;
    public cgltf_emissive_strength emissive_strength;
    public cgltf_iridescence iridescence;
    public cgltf_diffuse_transmission diffuse_transmission;
    public cgltf_anisotropy anisotropy;
    public cgltf_dispersion dispersion;
    public cgltf_texture_view normal_texture;
    public cgltf_texture_view occlusion_texture;
    public cgltf_texture_view emissive_texture;
    public fixed float emissive_factor[3];
    public cgltf_alpha_mode alpha_mode;
    public float alpha_cutoff;
    public int double_sided;
    public int unlit;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_material_mapping
{
    public ulong variant;
    public cgltf_material* material;
    public cgltf_extras extras;
}
public unsafe struct cgltf_morph_target
{
    public cgltf_attribute* attributes;
    public ulong attributes_count;
}
public unsafe struct cgltf_draco_mesh_compression
{
    public cgltf_buffer_view* buffer_view;
    public cgltf_attribute* attributes;
    public ulong attributes_count;
}
public unsafe struct cgltf_mesh_gpu_instancing
{
    public cgltf_attribute* attributes;
    public ulong attributes_count;
}
public unsafe struct cgltf_primitive
{
    public cgltf_primitive_type type;
    public cgltf_accessor* indices;
    public cgltf_material* material;
    public cgltf_attribute* attributes;
    public ulong attributes_count;
    public cgltf_morph_target* targets;
    public ulong targets_count;
    public cgltf_extras extras;
    public int has_draco_mesh_compression;
    public cgltf_draco_mesh_compression draco_mesh_compression;
    public cgltf_material_mapping* mappings;
    public ulong mappings_count;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_mesh
{
    public sbyte* name;
    public cgltf_primitive* primitives;
    public ulong primitives_count;
    public float* weights;
    public ulong weights_count;
    public sbyte** target_names;
    public ulong target_names_count;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_node
{
    public sbyte* name;
    public cgltf_node* parent;
    public cgltf_node** children;
    public ulong children_count;
    public cgltf_skin* skin;
    public cgltf_mesh* mesh;
    public cgltf_camera* camera;
    public cgltf_light* light;
    public float* weights;
    public ulong weights_count;
    public int has_translation;
    public int has_rotation;
    public int has_scale;
    public int has_matrix;
    public fixed float translation[3];
    public fixed float rotation[4];
    public fixed float scale[3];
    public fixed float matrix[16];
    public cgltf_extras extras;
    public int has_mesh_gpu_instancing;
    public cgltf_mesh_gpu_instancing mesh_gpu_instancing;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_skin
{
    public sbyte* name;
    public cgltf_node** joints;
    public ulong joints_count;
    public cgltf_node* skeleton;
    public cgltf_accessor* inverse_bind_matrices;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_camera_perspective
{
    public int has_aspect_ratio;
    public float aspect_ratio;
    public float yfov;
    public int has_zfar;
    public float zfar;
    public float znear;
    public cgltf_extras extras;
}
public unsafe struct cgltf_camera_orthographic
{
    public float xmag;
    public float ymag;
    public float zfar;
    public float znear;
    public cgltf_extras extras;
}
public unsafe struct cgltf_camera
{
    public sbyte* name;
    public cgltf_camera_type type;
    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct unnamed1
    {
        [FieldOffset(0)]
        public cgltf_camera_perspective perspective;
        [FieldOffset(0)]
        public cgltf_camera_orthographic orthographic;
    }

    public unnamed1 data;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_light
{
    public sbyte* name;
    public fixed float color[3];
    public float intensity;
    public cgltf_light_type type;
    public float range;
    public float spot_inner_cone_angle;
    public float spot_outer_cone_angle;
    public cgltf_extras extras;
}
public unsafe struct cgltf_scene
{
    public sbyte* name;
    public cgltf_node** nodes;
    public ulong nodes_count;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_animation_sampler
{
    public cgltf_accessor* input;
    public cgltf_accessor* output;
    public cgltf_interpolation_type interpolation;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_animation_channel
{
    public cgltf_animation_sampler* sampler;
    public cgltf_node* target_node;
    public cgltf_animation_path_type target_path;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_animation
{
    public sbyte* name;
    public cgltf_animation_sampler* samplers;
    public ulong samplers_count;
    public cgltf_animation_channel* channels;
    public ulong channels_count;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_material_variant
{
    public sbyte* name;
    public cgltf_extras extras;
}
public unsafe struct cgltf_asset
{
    public sbyte* copyright;
    public sbyte* generator;
    public sbyte* version;
    public sbyte* min_version;
    public cgltf_extras extras;
    public ulong extensions_count;
    public cgltf_extension* extensions;
}
public unsafe struct cgltf_data
{
    public cgltf_file_type file_type;
    public void* file_data;
    public cgltf_asset asset;
    public cgltf_mesh* meshes;
    public ulong meshes_count;
    public cgltf_material* materials;
    public ulong materials_count;
    public cgltf_accessor* accessors;
    public ulong accessors_count;
    public cgltf_buffer_view* buffer_views;
    public ulong buffer_views_count;
    public cgltf_buffer* buffers;
    public ulong buffers_count;
    public cgltf_image* images;
    public ulong images_count;
    public cgltf_texture* textures;
    public ulong textures_count;
    public cgltf_sampler* samplers;
    public ulong samplers_count;
    public cgltf_skin* skins;
    public ulong skins_count;
    public cgltf_camera* cameras;
    public ulong cameras_count;
    public cgltf_light* lights;
    public ulong lights_count;
    public cgltf_node* nodes;
    public ulong nodes_count;
    public cgltf_scene* scenes;
    public ulong scenes_count;
    public cgltf_scene* scene;
    public cgltf_animation* animations;
    public ulong animations_count;
    public cgltf_material_variant* variants;
    public ulong variants_count;
    public cgltf_extras extras;
    public ulong data_extensions_count;
    public cgltf_extension* data_extensions;
    public sbyte** extensions_used;
    public ulong extensions_used_count;
    public sbyte** extensions_required;
    public ulong extensions_required_count;
    public sbyte* json;
    public ulong json_size;
    public void* bin;
    public ulong bin_size;
    public cgltf_memory_options memory;
    public cgltf_file_options file;
}
public unsafe struct jsmntok_t
{
    public jsmntype_t type;
    public long start;
    public long end;
    public int size;
    public int parent;
}
public unsafe struct jsmn_parser
{
    public ulong pos;
    public uint toknext;
    public int toksuper;
}
public unsafe struct cgltf_write_context
{
    public sbyte* buffer;
    public ulong buffer_size;
    public ulong remaining;
    public sbyte* cursor;
    public ulong tmp;
    public ulong chars_written;
    public cgltf_data* data;
    public int depth;
    public sbyte* indent;
    public int needs_comma;
    public uint extension_flags;
    public uint required_extension_flags;
}
}