// Auto generated by yangzhou
// cgltf version: 1.14

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;
using static cgltf.NET.cgltf;

namespace cgltf.NET;
	public static unsafe partial class cgltfwrite
	{
static sbyte* const_0;// "  "
static sbyte* const_1;// "context->cursor || (!context->cursor && context->remaining == 0)"
static sbyte* const_2;// "cgltf_write.h"
static sbyte* const_3;// "{"
static sbyte* const_4;// ""accessors": ["
static sbyte* const_5;// "]"
static sbyte* const_6;// ""bufferViews": ["
static sbyte* const_7;// ""buffers": ["
static sbyte* const_8;// ""images": ["
static sbyte* const_9;// ""meshes": ["
static sbyte* const_10;// ""materials": ["
static sbyte* const_11;// ""nodes": ["
static sbyte* const_12;// ""samplers": ["
static sbyte* const_13;// ""%s": %d"
static sbyte* const_scene;// "scene"
static sbyte* const_15;// ""scenes": ["
static sbyte* const_16;// ""textures": ["
static sbyte* const_17;// ""skins": ["
static sbyte* const_18;// ""animations": ["
static sbyte* const_19;// ""cameras": ["
static sbyte* const_20;// ""extensions": {"
static sbyte* const_21;// ""KHR_lights_punctual": {"
static sbyte* const_22;// ""lights": ["
static sbyte* const_23;// "}"
static sbyte* const_24;// ""KHR_materials_variants": {"
static sbyte* const_25;// ""variants": ["
static sbyte* const_26;// ""extensionsUsed": ["
static sbyte* const_27;// ""extensionsRequired": ["
static sbyte* const_28;// "\n}\n"
static sbyte* const_29;// ",\n"
static sbyte* const_30;// "\n"
static sbyte* const_31;// "%s"
static sbyte* const_32;// ""%s": "%s""
static sbyte* const_33;// ""extras": %s"
static sbyte* const_34;// ""extras": "
static sbyte* const_35;// "%.*s"
static sbyte* const_36;// ""%s""
static sbyte* const_37;// ""%s": %zu"
static sbyte* const_38;// ""%s": "
static sbyte* const_39;// "%.*g"
static sbyte* const_40;// ""%s": %s"
static sbyte* const_true;// "true"
static sbyte* const_false;// "false"
static sbyte* const_43;// ""%s": ["
static sbyte* const_44;// ", %.*g"
static sbyte* const_MASK;// "MASK"
static sbyte* const_BLEND;// "BLEND"
static sbyte* const_SCALAR;// "SCALAR"
static sbyte* const_48;// "VEC2"
static sbyte* const_49;// "VEC3"
static sbyte* const_50;// "VEC4"
static sbyte* const_51;// "MAT2"
static sbyte* const_52;// "MAT3"
static sbyte* const_53;// "MAT4"
static sbyte* const_perspective;// "perspective"
static sbyte* const_orthographic;// "orthographic"
static sbyte* const_directional;// "directional"
static sbyte* const_point;// "point"
static sbyte* const_spot;// "spot"
static sbyte* const_59;// ""KHR_texture_transform": {"
static sbyte* const_offset;// "offset"
static sbyte* const_rotation;// "rotation"
static sbyte* const_scale;// "scale"
static sbyte* const_texCoord;// "texCoord"
static sbyte* const_64;// ""asset": {"
static sbyte* const_copyright;// "copyright"
static sbyte* const_generator;// "generator"
static sbyte* const_version;// "version"
static sbyte* const_min_version;// "min_version"
static sbyte* const_mode;// "mode"
static sbyte* const_indices;// "indices"
static sbyte* const_material;// "material"
static sbyte* const_72;// ""attributes": {"
static sbyte* const_73;// ""targets": ["
static sbyte* const_74;// ""KHR_draco_mesh_compression": {"
static sbyte* const_bufferView;// "bufferView"
static sbyte* const_76;// ""mappings": ["
static sbyte* const_77;// ""variants": [%d]"
static sbyte* const_name;// "name"
static sbyte* const_79;// ""primitives": ["
static sbyte* const_weights;// "weights"
static sbyte* const_buffer;// "buffer"
static sbyte* const_byteLength;// "byteLength"
static sbyte* const_byteOffset;// "byteOffset"
static sbyte* const_byteStride;// "byteStride"
static sbyte* const_uri;// "uri"
static sbyte* const_alphaCutoff;// "alphaCutoff"
static sbyte* const_doubleSided;// "doubleSided"
static sbyte* const_88;// ""pbrMetallicRoughness": {"
static sbyte* const_89;// ""baseColorTexture": {"
static sbyte* const_index;// "index"
static sbyte* const_91;// ""metallicRoughnessTexture": {"
static sbyte* const_metallicFactor;// "metallicFactor"
static sbyte* const_roughnessFactor;// "roughnessFactor"
static sbyte* const_baseColorFactor;// "baseColorFactor"
static sbyte* const_95;// ""KHR_materials_clearcoat": {"
static sbyte* const_96;// ""clearcoatTexture": {"
static sbyte* const_97;// ""clearcoatRoughnessTexture": {"
static sbyte* const_98;// ""clearcoatNormalTexture": {"
static sbyte* const_clearcoatFactor;// "clearcoatFactor"
static sbyte* const_clearcoatRoughnessFactor;// "clearcoatRoughnessFactor"
static sbyte* const_101;// ""KHR_materials_ior": {"
static sbyte* const_ior;// "ior"
static sbyte* const_103;// ""KHR_materials_specular": {"
static sbyte* const_104;// ""specularTexture": {"
static sbyte* const_105;// ""specularColorTexture": {"
static sbyte* const_specularFactor;// "specularFactor"
static sbyte* const_specularColorFactor;// "specularColorFactor"
static sbyte* const_108;// ""KHR_materials_transmission": {"
static sbyte* const_109;// ""transmissionTexture": {"
static sbyte* const_transmissionFactor;// "transmissionFactor"
static sbyte* const_111;// ""KHR_materials_volume": {"
static sbyte* const_112;// ""thicknessTexture": {"
static sbyte* const_thicknessFactor;// "thicknessFactor"
static sbyte* const_attenuationColor;// "attenuationColor"
static sbyte* const_attenuationDistance;// "attenuationDistance"
static sbyte* const_116;// ""KHR_materials_sheen": {"
static sbyte* const_117;// ""sheenColorTexture": {"
static sbyte* const_118;// ""sheenRoughnessTexture": {"
static sbyte* const_sheenColorFactor;// "sheenColorFactor"
static sbyte* const_sheenRoughnessFactor;// "sheenRoughnessFactor"
static sbyte* const_121;// ""KHR_materials_pbrSpecularGlossiness": {"
static sbyte* const_122;// ""diffuseTexture": {"
static sbyte* const_123;// ""specularGlossinessTexture": {"
static sbyte* const_diffuseFactor;// "diffuseFactor"
static sbyte* const_glossinessFactor;// "glossinessFactor"
static sbyte* const_126;// ""KHR_materials_unlit": {}"
static sbyte* const_127;// ""KHR_materials_emissive_strength": {"
static sbyte* const_emissiveStrength;// "emissiveStrength"
static sbyte* const_129;// ""KHR_materials_iridescence": {"
static sbyte* const_iridescenceFactor;// "iridescenceFactor"
static sbyte* const_131;// ""iridescenceTexture": {"
static sbyte* const_iridescenceIor;// "iridescenceIor"
static sbyte* const_iridescenceThicknessMinimum;// "iridescenceThicknessMinimum"
static sbyte* const_iridescenceThicknessMaximum;// "iridescenceThicknessMaximum"
static sbyte* const_135;// ""iridescenceThicknessTexture": {"
static sbyte* const_136;// ""KHR_materials_diffuse_transmission": {"
static sbyte* const_137;// ""diffuseTransmissionTexture": {"
static sbyte* const_diffuseTransmissionFactor;// "diffuseTransmissionFactor"
static sbyte* const_diffuseTransmissionColorFactor;// "diffuseTransmissionColorFactor"
static sbyte* const_140;// ""diffuseTransmissionColorTexture": {"
static sbyte* const_141;// ""KHR_materials_anisotropy": {"
static sbyte* const_anisotropyFactor;// "anisotropyFactor"
static sbyte* const_anisotropyRotation;// "anisotropyRotation"
static sbyte* const_144;// ""anisotropyTexture": {"
static sbyte* const_145;// ""KHR_materials_dispersion": {"
static sbyte* const_dispersion;// "dispersion"
static sbyte* const_147;// ""normalTexture": {"
static sbyte* const_148;// ""occlusionTexture": {"
static sbyte* const_strength;// "strength"
static sbyte* const_150;// ""emissiveTexture": {"
static sbyte* const_emissiveFactor;// "emissiveFactor"
static sbyte* const_alphaMode;// "alphaMode"
static sbyte* const_mimeType;// "mimeType"
static sbyte* const_source;// "source"
static sbyte* const_sampler;// "sampler"
static sbyte* const_156;// ""KHR_texture_basisu": {"
static sbyte* const_157;// ""EXT_texture_webp": {"
static sbyte* const_skeleton;// "skeleton"
static sbyte* const_inverseBindMatrices;// "inverseBindMatrices"
static sbyte* const_joints;// "joints"
static sbyte* const_161;// ","
static sbyte* const_162;// " %d"
static sbyte* const_163;// " ]"
static sbyte* const_translation;// "translation"
static sbyte* const_invalid;// "invalid"
static sbyte* const_LINEAR;// "LINEAR"
static sbyte* const_STEP;// "STEP"
static sbyte* const_CUBICSPLINE;// "CUBICSPLINE"
static sbyte* const_interpolation;// "interpolation"
static sbyte* const_input;// "input"
static sbyte* const_output;// "output"
static sbyte* const_172;// ""target": {"
static sbyte* const_node;// "node"
static sbyte* const_path;// "path"
static sbyte* const_175;// ""channels": ["
static sbyte* const_magFilter;// "magFilter"
static sbyte* const_minFilter;// "minFilter"
static sbyte* const_wrapS;// "wrapS"
static sbyte* const_wrapT;// "wrapT"
static sbyte* const_children;// "children"
static sbyte* const_mesh;// "mesh"
static sbyte* const_matrix;// "matrix"
static sbyte* const_skin;// "skin"
static sbyte* const_light;// "light"
static sbyte* const_185;// ""EXT_mesh_gpu_instancing": {"
static sbyte* const_camera;// "camera"
static sbyte* const_nodes;// "nodes"
static sbyte* const_componentType;// "componentType"
static sbyte* const_type;// "type"
static sbyte* const_normalized;// "normalized"
static sbyte* const_count;// "count"
static sbyte* const_min;// "min"
static sbyte* const_max;// "max"
static sbyte* const_194;// ""sparse": {"
static sbyte* const_195;// ""indices": {"
static sbyte* const_196;// ""values": {"
static sbyte* const_197;// ""orthographic": {"
static sbyte* const_xmag;// "xmag"
static sbyte* const_ymag;// "ymag"
static sbyte* const_zfar;// "zfar"
static sbyte* const_znear;// "znear"
static sbyte* const_202;// ""perspective": {"
static sbyte* const_aspectRatio;// "aspectRatio"
static sbyte* const_yfov;// "yfov"
static sbyte* const_color;// "color"
static sbyte* const_intensity;// "intensity"
static sbyte* const_range;// "range"
static sbyte* const_208;// ""spot": {"
static sbyte* const_innerConeAngle;// "innerConeAngle"
static sbyte* const_outerConeAngle;// "outerConeAngle"
static sbyte* const_KHR_texture_transform;// "KHR_texture_transform"
static sbyte* const_KHR_materials_unlit;// "KHR_materials_unlit"
static sbyte* const_KHR_materials_pbrSpecularGlossiness;// "KHR_materials_pbrSpecularGlossiness"
static sbyte* const_KHR_lights_punctual;// "KHR_lights_punctual"
static sbyte* const_KHR_draco_mesh_compression;// "KHR_draco_mesh_compression"
static sbyte* const_KHR_materials_clearcoat;// "KHR_materials_clearcoat"
static sbyte* const_KHR_materials_ior;// "KHR_materials_ior"
static sbyte* const_KHR_materials_specular;// "KHR_materials_specular"
static sbyte* const_KHR_materials_transmission;// "KHR_materials_transmission"
static sbyte* const_KHR_materials_sheen;// "KHR_materials_sheen"
static sbyte* const_KHR_materials_variants;// "KHR_materials_variants"
static sbyte* const_KHR_materials_volume;// "KHR_materials_volume"
static sbyte* const_KHR_texture_basisu;// "KHR_texture_basisu"
static sbyte* const_EXT_texture_webp;// "EXT_texture_webp"
static sbyte* const_KHR_materials_emissive_strength;// "KHR_materials_emissive_strength"
static sbyte* const_KHR_materials_iridescence;// "KHR_materials_iridescence"
static sbyte* const_KHR_materials_diffuse_transmission;// "KHR_materials_diffuse_transmission"
static sbyte* const_KHR_materials_anisotropy;// "KHR_materials_anisotropy"
static sbyte* const_EXT_mesh_gpu_instancing;// "EXT_mesh_gpu_instancing"
static sbyte* const_KHR_materials_dispersion;// "KHR_materials_dispersion"
public static void InitConst()
{
sbyte[] _const_0 = new sbyte[] { 32, 32, 0};// "  "
const_0 = (sbyte*)Marshal.AllocHGlobal(_const_0.Length);
fixed (sbyte* src = _const_0)
{
    Buffer.MemoryCopy(src, const_0, _const_0.Length, _const_0.Length);
}
sbyte[] _const_1 = new sbyte[] { 99, 111, 110, 116, 101, 120, 116, 45, 62, 99, 117, 114, 115, 111, 114, 32, 124, 124, 32, 40, 33, 99, 111, 110, 116, 101, 120, 116, 45, 62, 99, 117, 114, 115, 111, 114, 32, 38, 38, 32, 99, 111, 110, 116, 101, 120, 116, 45, 62, 114, 101, 109, 97, 105, 110, 105, 110, 103, 32, 61, 61, 32, 48, 41, 0};// "context->cursor || (!context->cursor && context->remaining == 0)"
const_1 = (sbyte*)Marshal.AllocHGlobal(_const_1.Length);
fixed (sbyte* src = _const_1)
{
    Buffer.MemoryCopy(src, const_1, _const_1.Length, _const_1.Length);
}
sbyte[] _const_2 = new sbyte[] { 99, 103, 108, 116, 102, 95, 119, 114, 105, 116, 101, 46, 104, 0};// "cgltf_write.h"
const_2 = (sbyte*)Marshal.AllocHGlobal(_const_2.Length);
fixed (sbyte* src = _const_2)
{
    Buffer.MemoryCopy(src, const_2, _const_2.Length, _const_2.Length);
}
sbyte[] _const_3 = new sbyte[] { 123, 0};// "{"
const_3 = (sbyte*)Marshal.AllocHGlobal(_const_3.Length);
fixed (sbyte* src = _const_3)
{
    Buffer.MemoryCopy(src, const_3, _const_3.Length, _const_3.Length);
}
sbyte[] _const_4 = new sbyte[] { 34, 97, 99, 99, 101, 115, 115, 111, 114, 115, 34, 58, 32, 91, 0};// ""accessors": ["
const_4 = (sbyte*)Marshal.AllocHGlobal(_const_4.Length);
fixed (sbyte* src = _const_4)
{
    Buffer.MemoryCopy(src, const_4, _const_4.Length, _const_4.Length);
}
sbyte[] _const_5 = new sbyte[] { 93, 0};// "]"
const_5 = (sbyte*)Marshal.AllocHGlobal(_const_5.Length);
fixed (sbyte* src = _const_5)
{
    Buffer.MemoryCopy(src, const_5, _const_5.Length, _const_5.Length);
}
sbyte[] _const_6 = new sbyte[] { 34, 98, 117, 102, 102, 101, 114, 86, 105, 101, 119, 115, 34, 58, 32, 91, 0};// ""bufferViews": ["
const_6 = (sbyte*)Marshal.AllocHGlobal(_const_6.Length);
fixed (sbyte* src = _const_6)
{
    Buffer.MemoryCopy(src, const_6, _const_6.Length, _const_6.Length);
}
sbyte[] _const_7 = new sbyte[] { 34, 98, 117, 102, 102, 101, 114, 115, 34, 58, 32, 91, 0};// ""buffers": ["
const_7 = (sbyte*)Marshal.AllocHGlobal(_const_7.Length);
fixed (sbyte* src = _const_7)
{
    Buffer.MemoryCopy(src, const_7, _const_7.Length, _const_7.Length);
}
sbyte[] _const_8 = new sbyte[] { 34, 105, 109, 97, 103, 101, 115, 34, 58, 32, 91, 0};// ""images": ["
const_8 = (sbyte*)Marshal.AllocHGlobal(_const_8.Length);
fixed (sbyte* src = _const_8)
{
    Buffer.MemoryCopy(src, const_8, _const_8.Length, _const_8.Length);
}
sbyte[] _const_9 = new sbyte[] { 34, 109, 101, 115, 104, 101, 115, 34, 58, 32, 91, 0};// ""meshes": ["
const_9 = (sbyte*)Marshal.AllocHGlobal(_const_9.Length);
fixed (sbyte* src = _const_9)
{
    Buffer.MemoryCopy(src, const_9, _const_9.Length, _const_9.Length);
}
sbyte[] _const_10 = new sbyte[] { 34, 109, 97, 116, 101, 114, 105, 97, 108, 115, 34, 58, 32, 91, 0};// ""materials": ["
const_10 = (sbyte*)Marshal.AllocHGlobal(_const_10.Length);
fixed (sbyte* src = _const_10)
{
    Buffer.MemoryCopy(src, const_10, _const_10.Length, _const_10.Length);
}
sbyte[] _const_11 = new sbyte[] { 34, 110, 111, 100, 101, 115, 34, 58, 32, 91, 0};// ""nodes": ["
const_11 = (sbyte*)Marshal.AllocHGlobal(_const_11.Length);
fixed (sbyte* src = _const_11)
{
    Buffer.MemoryCopy(src, const_11, _const_11.Length, _const_11.Length);
}
sbyte[] _const_12 = new sbyte[] { 34, 115, 97, 109, 112, 108, 101, 114, 115, 34, 58, 32, 91, 0};// ""samplers": ["
const_12 = (sbyte*)Marshal.AllocHGlobal(_const_12.Length);
fixed (sbyte* src = _const_12)
{
    Buffer.MemoryCopy(src, const_12, _const_12.Length, _const_12.Length);
}
sbyte[] _const_13 = new sbyte[] { 34, 37, 115, 34, 58, 32, 37, 100, 0};// ""%s": %d"
const_13 = (sbyte*)Marshal.AllocHGlobal(_const_13.Length);
fixed (sbyte* src = _const_13)
{
    Buffer.MemoryCopy(src, const_13, _const_13.Length, _const_13.Length);
}
sbyte[] _const_scene = new sbyte[] { 115, 99, 101, 110, 101, 0};// "scene"
const_scene = (sbyte*)Marshal.AllocHGlobal(_const_scene.Length);
fixed (sbyte* src = _const_scene)
{
    Buffer.MemoryCopy(src, const_scene, _const_scene.Length, _const_scene.Length);
}
sbyte[] _const_15 = new sbyte[] { 34, 115, 99, 101, 110, 101, 115, 34, 58, 32, 91, 0};// ""scenes": ["
const_15 = (sbyte*)Marshal.AllocHGlobal(_const_15.Length);
fixed (sbyte* src = _const_15)
{
    Buffer.MemoryCopy(src, const_15, _const_15.Length, _const_15.Length);
}
sbyte[] _const_16 = new sbyte[] { 34, 116, 101, 120, 116, 117, 114, 101, 115, 34, 58, 32, 91, 0};// ""textures": ["
const_16 = (sbyte*)Marshal.AllocHGlobal(_const_16.Length);
fixed (sbyte* src = _const_16)
{
    Buffer.MemoryCopy(src, const_16, _const_16.Length, _const_16.Length);
}
sbyte[] _const_17 = new sbyte[] { 34, 115, 107, 105, 110, 115, 34, 58, 32, 91, 0};// ""skins": ["
const_17 = (sbyte*)Marshal.AllocHGlobal(_const_17.Length);
fixed (sbyte* src = _const_17)
{
    Buffer.MemoryCopy(src, const_17, _const_17.Length, _const_17.Length);
}
sbyte[] _const_18 = new sbyte[] { 34, 97, 110, 105, 109, 97, 116, 105, 111, 110, 115, 34, 58, 32, 91, 0};// ""animations": ["
const_18 = (sbyte*)Marshal.AllocHGlobal(_const_18.Length);
fixed (sbyte* src = _const_18)
{
    Buffer.MemoryCopy(src, const_18, _const_18.Length, _const_18.Length);
}
sbyte[] _const_19 = new sbyte[] { 34, 99, 97, 109, 101, 114, 97, 115, 34, 58, 32, 91, 0};// ""cameras": ["
const_19 = (sbyte*)Marshal.AllocHGlobal(_const_19.Length);
fixed (sbyte* src = _const_19)
{
    Buffer.MemoryCopy(src, const_19, _const_19.Length, _const_19.Length);
}
sbyte[] _const_20 = new sbyte[] { 34, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 34, 58, 32, 123, 0};// ""extensions": {"
const_20 = (sbyte*)Marshal.AllocHGlobal(_const_20.Length);
fixed (sbyte* src = _const_20)
{
    Buffer.MemoryCopy(src, const_20, _const_20.Length, _const_20.Length);
}
sbyte[] _const_21 = new sbyte[] { 34, 75, 72, 82, 95, 108, 105, 103, 104, 116, 115, 95, 112, 117, 110, 99, 116, 117, 97, 108, 34, 58, 32, 123, 0};// ""KHR_lights_punctual": {"
const_21 = (sbyte*)Marshal.AllocHGlobal(_const_21.Length);
fixed (sbyte* src = _const_21)
{
    Buffer.MemoryCopy(src, const_21, _const_21.Length, _const_21.Length);
}
sbyte[] _const_22 = new sbyte[] { 34, 108, 105, 103, 104, 116, 115, 34, 58, 32, 91, 0};// ""lights": ["
const_22 = (sbyte*)Marshal.AllocHGlobal(_const_22.Length);
fixed (sbyte* src = _const_22)
{
    Buffer.MemoryCopy(src, const_22, _const_22.Length, _const_22.Length);
}
sbyte[] _const_23 = new sbyte[] { 125, 0};// "}"
const_23 = (sbyte*)Marshal.AllocHGlobal(_const_23.Length);
fixed (sbyte* src = _const_23)
{
    Buffer.MemoryCopy(src, const_23, _const_23.Length, _const_23.Length);
}
sbyte[] _const_24 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 118, 97, 114, 105, 97, 110, 116, 115, 34, 58, 32, 123, 0};// ""KHR_materials_variants": {"
const_24 = (sbyte*)Marshal.AllocHGlobal(_const_24.Length);
fixed (sbyte* src = _const_24)
{
    Buffer.MemoryCopy(src, const_24, _const_24.Length, _const_24.Length);
}
sbyte[] _const_25 = new sbyte[] { 34, 118, 97, 114, 105, 97, 110, 116, 115, 34, 58, 32, 91, 0};// ""variants": ["
const_25 = (sbyte*)Marshal.AllocHGlobal(_const_25.Length);
fixed (sbyte* src = _const_25)
{
    Buffer.MemoryCopy(src, const_25, _const_25.Length, _const_25.Length);
}
sbyte[] _const_26 = new sbyte[] { 34, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 85, 115, 101, 100, 34, 58, 32, 91, 0};// ""extensionsUsed": ["
const_26 = (sbyte*)Marshal.AllocHGlobal(_const_26.Length);
fixed (sbyte* src = _const_26)
{
    Buffer.MemoryCopy(src, const_26, _const_26.Length, _const_26.Length);
}
sbyte[] _const_27 = new sbyte[] { 34, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 82, 101, 113, 117, 105, 114, 101, 100, 34, 58, 32, 91, 0};// ""extensionsRequired": ["
const_27 = (sbyte*)Marshal.AllocHGlobal(_const_27.Length);
fixed (sbyte* src = _const_27)
{
    Buffer.MemoryCopy(src, const_27, _const_27.Length, _const_27.Length);
}
sbyte[] _const_28 = new sbyte[] { 10, 125, 10, 0};// "\n}\n"
const_28 = (sbyte*)Marshal.AllocHGlobal(_const_28.Length);
fixed (sbyte* src = _const_28)
{
    Buffer.MemoryCopy(src, const_28, _const_28.Length, _const_28.Length);
}
sbyte[] _const_29 = new sbyte[] { 44, 10, 0};// ",\n"
const_29 = (sbyte*)Marshal.AllocHGlobal(_const_29.Length);
fixed (sbyte* src = _const_29)
{
    Buffer.MemoryCopy(src, const_29, _const_29.Length, _const_29.Length);
}
sbyte[] _const_30 = new sbyte[] { 10, 0};// "\n"
const_30 = (sbyte*)Marshal.AllocHGlobal(_const_30.Length);
fixed (sbyte* src = _const_30)
{
    Buffer.MemoryCopy(src, const_30, _const_30.Length, _const_30.Length);
}
sbyte[] _const_31 = new sbyte[] { 37, 115, 0};// "%s"
const_31 = (sbyte*)Marshal.AllocHGlobal(_const_31.Length);
fixed (sbyte* src = _const_31)
{
    Buffer.MemoryCopy(src, const_31, _const_31.Length, _const_31.Length);
}
sbyte[] _const_32 = new sbyte[] { 34, 37, 115, 34, 58, 32, 34, 37, 115, 34, 0};// ""%s": "%s""
const_32 = (sbyte*)Marshal.AllocHGlobal(_const_32.Length);
fixed (sbyte* src = _const_32)
{
    Buffer.MemoryCopy(src, const_32, _const_32.Length, _const_32.Length);
}
sbyte[] _const_33 = new sbyte[] { 34, 101, 120, 116, 114, 97, 115, 34, 58, 32, 37, 115, 0};// ""extras": %s"
const_33 = (sbyte*)Marshal.AllocHGlobal(_const_33.Length);
fixed (sbyte* src = _const_33)
{
    Buffer.MemoryCopy(src, const_33, _const_33.Length, _const_33.Length);
}
sbyte[] _const_34 = new sbyte[] { 34, 101, 120, 116, 114, 97, 115, 34, 58, 32, 0};// ""extras": "
const_34 = (sbyte*)Marshal.AllocHGlobal(_const_34.Length);
fixed (sbyte* src = _const_34)
{
    Buffer.MemoryCopy(src, const_34, _const_34.Length, _const_34.Length);
}
sbyte[] _const_35 = new sbyte[] { 37, 46, 42, 115, 0};// "%.*s"
const_35 = (sbyte*)Marshal.AllocHGlobal(_const_35.Length);
fixed (sbyte* src = _const_35)
{
    Buffer.MemoryCopy(src, const_35, _const_35.Length, _const_35.Length);
}
sbyte[] _const_36 = new sbyte[] { 34, 37, 115, 34, 0};// ""%s""
const_36 = (sbyte*)Marshal.AllocHGlobal(_const_36.Length);
fixed (sbyte* src = _const_36)
{
    Buffer.MemoryCopy(src, const_36, _const_36.Length, _const_36.Length);
}
sbyte[] _const_37 = new sbyte[] { 34, 37, 115, 34, 58, 32, 37, 122, 117, 0};// ""%s": %zu"
const_37 = (sbyte*)Marshal.AllocHGlobal(_const_37.Length);
fixed (sbyte* src = _const_37)
{
    Buffer.MemoryCopy(src, const_37, _const_37.Length, _const_37.Length);
}
sbyte[] _const_38 = new sbyte[] { 34, 37, 115, 34, 58, 32, 0};// ""%s": "
const_38 = (sbyte*)Marshal.AllocHGlobal(_const_38.Length);
fixed (sbyte* src = _const_38)
{
    Buffer.MemoryCopy(src, const_38, _const_38.Length, _const_38.Length);
}
sbyte[] _const_39 = new sbyte[] { 37, 46, 42, 103, 0};// "%.*g"
const_39 = (sbyte*)Marshal.AllocHGlobal(_const_39.Length);
fixed (sbyte* src = _const_39)
{
    Buffer.MemoryCopy(src, const_39, _const_39.Length, _const_39.Length);
}
sbyte[] _const_40 = new sbyte[] { 34, 37, 115, 34, 58, 32, 37, 115, 0};// ""%s": %s"
const_40 = (sbyte*)Marshal.AllocHGlobal(_const_40.Length);
fixed (sbyte* src = _const_40)
{
    Buffer.MemoryCopy(src, const_40, _const_40.Length, _const_40.Length);
}
sbyte[] _const_true = new sbyte[] { 116, 114, 117, 101, 0};// "true"
const_true = (sbyte*)Marshal.AllocHGlobal(_const_true.Length);
fixed (sbyte* src = _const_true)
{
    Buffer.MemoryCopy(src, const_true, _const_true.Length, _const_true.Length);
}
sbyte[] _const_false = new sbyte[] { 102, 97, 108, 115, 101, 0};// "false"
const_false = (sbyte*)Marshal.AllocHGlobal(_const_false.Length);
fixed (sbyte* src = _const_false)
{
    Buffer.MemoryCopy(src, const_false, _const_false.Length, _const_false.Length);
}
sbyte[] _const_43 = new sbyte[] { 34, 37, 115, 34, 58, 32, 91, 0};// ""%s": ["
const_43 = (sbyte*)Marshal.AllocHGlobal(_const_43.Length);
fixed (sbyte* src = _const_43)
{
    Buffer.MemoryCopy(src, const_43, _const_43.Length, _const_43.Length);
}
sbyte[] _const_44 = new sbyte[] { 44, 32, 37, 46, 42, 103, 0};// ", %.*g"
const_44 = (sbyte*)Marshal.AllocHGlobal(_const_44.Length);
fixed (sbyte* src = _const_44)
{
    Buffer.MemoryCopy(src, const_44, _const_44.Length, _const_44.Length);
}
sbyte[] _const_MASK = new sbyte[] { 77, 65, 83, 75, 0};// "MASK"
const_MASK = (sbyte*)Marshal.AllocHGlobal(_const_MASK.Length);
fixed (sbyte* src = _const_MASK)
{
    Buffer.MemoryCopy(src, const_MASK, _const_MASK.Length, _const_MASK.Length);
}
sbyte[] _const_BLEND = new sbyte[] { 66, 76, 69, 78, 68, 0};// "BLEND"
const_BLEND = (sbyte*)Marshal.AllocHGlobal(_const_BLEND.Length);
fixed (sbyte* src = _const_BLEND)
{
    Buffer.MemoryCopy(src, const_BLEND, _const_BLEND.Length, _const_BLEND.Length);
}
sbyte[] _const_SCALAR = new sbyte[] { 83, 67, 65, 76, 65, 82, 0};// "SCALAR"
const_SCALAR = (sbyte*)Marshal.AllocHGlobal(_const_SCALAR.Length);
fixed (sbyte* src = _const_SCALAR)
{
    Buffer.MemoryCopy(src, const_SCALAR, _const_SCALAR.Length, _const_SCALAR.Length);
}
sbyte[] _const_48 = new sbyte[] { 86, 69, 67, 50, 0};// "VEC2"
const_48 = (sbyte*)Marshal.AllocHGlobal(_const_48.Length);
fixed (sbyte* src = _const_48)
{
    Buffer.MemoryCopy(src, const_48, _const_48.Length, _const_48.Length);
}
sbyte[] _const_49 = new sbyte[] { 86, 69, 67, 51, 0};// "VEC3"
const_49 = (sbyte*)Marshal.AllocHGlobal(_const_49.Length);
fixed (sbyte* src = _const_49)
{
    Buffer.MemoryCopy(src, const_49, _const_49.Length, _const_49.Length);
}
sbyte[] _const_50 = new sbyte[] { 86, 69, 67, 52, 0};// "VEC4"
const_50 = (sbyte*)Marshal.AllocHGlobal(_const_50.Length);
fixed (sbyte* src = _const_50)
{
    Buffer.MemoryCopy(src, const_50, _const_50.Length, _const_50.Length);
}
sbyte[] _const_51 = new sbyte[] { 77, 65, 84, 50, 0};// "MAT2"
const_51 = (sbyte*)Marshal.AllocHGlobal(_const_51.Length);
fixed (sbyte* src = _const_51)
{
    Buffer.MemoryCopy(src, const_51, _const_51.Length, _const_51.Length);
}
sbyte[] _const_52 = new sbyte[] { 77, 65, 84, 51, 0};// "MAT3"
const_52 = (sbyte*)Marshal.AllocHGlobal(_const_52.Length);
fixed (sbyte* src = _const_52)
{
    Buffer.MemoryCopy(src, const_52, _const_52.Length, _const_52.Length);
}
sbyte[] _const_53 = new sbyte[] { 77, 65, 84, 52, 0};// "MAT4"
const_53 = (sbyte*)Marshal.AllocHGlobal(_const_53.Length);
fixed (sbyte* src = _const_53)
{
    Buffer.MemoryCopy(src, const_53, _const_53.Length, _const_53.Length);
}
sbyte[] _const_perspective = new sbyte[] { 112, 101, 114, 115, 112, 101, 99, 116, 105, 118, 101, 0};// "perspective"
const_perspective = (sbyte*)Marshal.AllocHGlobal(_const_perspective.Length);
fixed (sbyte* src = _const_perspective)
{
    Buffer.MemoryCopy(src, const_perspective, _const_perspective.Length, _const_perspective.Length);
}
sbyte[] _const_orthographic = new sbyte[] { 111, 114, 116, 104, 111, 103, 114, 97, 112, 104, 105, 99, 0};// "orthographic"
const_orthographic = (sbyte*)Marshal.AllocHGlobal(_const_orthographic.Length);
fixed (sbyte* src = _const_orthographic)
{
    Buffer.MemoryCopy(src, const_orthographic, _const_orthographic.Length, _const_orthographic.Length);
}
sbyte[] _const_directional = new sbyte[] { 100, 105, 114, 101, 99, 116, 105, 111, 110, 97, 108, 0};// "directional"
const_directional = (sbyte*)Marshal.AllocHGlobal(_const_directional.Length);
fixed (sbyte* src = _const_directional)
{
    Buffer.MemoryCopy(src, const_directional, _const_directional.Length, _const_directional.Length);
}
sbyte[] _const_point = new sbyte[] { 112, 111, 105, 110, 116, 0};// "point"
const_point = (sbyte*)Marshal.AllocHGlobal(_const_point.Length);
fixed (sbyte* src = _const_point)
{
    Buffer.MemoryCopy(src, const_point, _const_point.Length, _const_point.Length);
}
sbyte[] _const_spot = new sbyte[] { 115, 112, 111, 116, 0};// "spot"
const_spot = (sbyte*)Marshal.AllocHGlobal(_const_spot.Length);
fixed (sbyte* src = _const_spot)
{
    Buffer.MemoryCopy(src, const_spot, _const_spot.Length, _const_spot.Length);
}
sbyte[] _const_59 = new sbyte[] { 34, 75, 72, 82, 95, 116, 101, 120, 116, 117, 114, 101, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 34, 58, 32, 123, 0};// ""KHR_texture_transform": {"
const_59 = (sbyte*)Marshal.AllocHGlobal(_const_59.Length);
fixed (sbyte* src = _const_59)
{
    Buffer.MemoryCopy(src, const_59, _const_59.Length, _const_59.Length);
}
sbyte[] _const_offset = new sbyte[] { 111, 102, 102, 115, 101, 116, 0};// "offset"
const_offset = (sbyte*)Marshal.AllocHGlobal(_const_offset.Length);
fixed (sbyte* src = _const_offset)
{
    Buffer.MemoryCopy(src, const_offset, _const_offset.Length, _const_offset.Length);
}
sbyte[] _const_rotation = new sbyte[] { 114, 111, 116, 97, 116, 105, 111, 110, 0};// "rotation"
const_rotation = (sbyte*)Marshal.AllocHGlobal(_const_rotation.Length);
fixed (sbyte* src = _const_rotation)
{
    Buffer.MemoryCopy(src, const_rotation, _const_rotation.Length, _const_rotation.Length);
}
sbyte[] _const_scale = new sbyte[] { 115, 99, 97, 108, 101, 0};// "scale"
const_scale = (sbyte*)Marshal.AllocHGlobal(_const_scale.Length);
fixed (sbyte* src = _const_scale)
{
    Buffer.MemoryCopy(src, const_scale, _const_scale.Length, _const_scale.Length);
}
sbyte[] _const_texCoord = new sbyte[] { 116, 101, 120, 67, 111, 111, 114, 100, 0};// "texCoord"
const_texCoord = (sbyte*)Marshal.AllocHGlobal(_const_texCoord.Length);
fixed (sbyte* src = _const_texCoord)
{
    Buffer.MemoryCopy(src, const_texCoord, _const_texCoord.Length, _const_texCoord.Length);
}
sbyte[] _const_64 = new sbyte[] { 34, 97, 115, 115, 101, 116, 34, 58, 32, 123, 0};// ""asset": {"
const_64 = (sbyte*)Marshal.AllocHGlobal(_const_64.Length);
fixed (sbyte* src = _const_64)
{
    Buffer.MemoryCopy(src, const_64, _const_64.Length, _const_64.Length);
}
sbyte[] _const_copyright = new sbyte[] { 99, 111, 112, 121, 114, 105, 103, 104, 116, 0};// "copyright"
const_copyright = (sbyte*)Marshal.AllocHGlobal(_const_copyright.Length);
fixed (sbyte* src = _const_copyright)
{
    Buffer.MemoryCopy(src, const_copyright, _const_copyright.Length, _const_copyright.Length);
}
sbyte[] _const_generator = new sbyte[] { 103, 101, 110, 101, 114, 97, 116, 111, 114, 0};// "generator"
const_generator = (sbyte*)Marshal.AllocHGlobal(_const_generator.Length);
fixed (sbyte* src = _const_generator)
{
    Buffer.MemoryCopy(src, const_generator, _const_generator.Length, _const_generator.Length);
}
sbyte[] _const_version = new sbyte[] { 118, 101, 114, 115, 105, 111, 110, 0};// "version"
const_version = (sbyte*)Marshal.AllocHGlobal(_const_version.Length);
fixed (sbyte* src = _const_version)
{
    Buffer.MemoryCopy(src, const_version, _const_version.Length, _const_version.Length);
}
sbyte[] _const_min_version = new sbyte[] { 109, 105, 110, 95, 118, 101, 114, 115, 105, 111, 110, 0};// "min_version"
const_min_version = (sbyte*)Marshal.AllocHGlobal(_const_min_version.Length);
fixed (sbyte* src = _const_min_version)
{
    Buffer.MemoryCopy(src, const_min_version, _const_min_version.Length, _const_min_version.Length);
}
sbyte[] _const_mode = new sbyte[] { 109, 111, 100, 101, 0};// "mode"
const_mode = (sbyte*)Marshal.AllocHGlobal(_const_mode.Length);
fixed (sbyte* src = _const_mode)
{
    Buffer.MemoryCopy(src, const_mode, _const_mode.Length, _const_mode.Length);
}
sbyte[] _const_indices = new sbyte[] { 105, 110, 100, 105, 99, 101, 115, 0};// "indices"
const_indices = (sbyte*)Marshal.AllocHGlobal(_const_indices.Length);
fixed (sbyte* src = _const_indices)
{
    Buffer.MemoryCopy(src, const_indices, _const_indices.Length, _const_indices.Length);
}
sbyte[] _const_material = new sbyte[] { 109, 97, 116, 101, 114, 105, 97, 108, 0};// "material"
const_material = (sbyte*)Marshal.AllocHGlobal(_const_material.Length);
fixed (sbyte* src = _const_material)
{
    Buffer.MemoryCopy(src, const_material, _const_material.Length, _const_material.Length);
}
sbyte[] _const_72 = new sbyte[] { 34, 97, 116, 116, 114, 105, 98, 117, 116, 101, 115, 34, 58, 32, 123, 0};// ""attributes": {"
const_72 = (sbyte*)Marshal.AllocHGlobal(_const_72.Length);
fixed (sbyte* src = _const_72)
{
    Buffer.MemoryCopy(src, const_72, _const_72.Length, _const_72.Length);
}
sbyte[] _const_73 = new sbyte[] { 34, 116, 97, 114, 103, 101, 116, 115, 34, 58, 32, 91, 0};// ""targets": ["
const_73 = (sbyte*)Marshal.AllocHGlobal(_const_73.Length);
fixed (sbyte* src = _const_73)
{
    Buffer.MemoryCopy(src, const_73, _const_73.Length, _const_73.Length);
}
sbyte[] _const_74 = new sbyte[] { 34, 75, 72, 82, 95, 100, 114, 97, 99, 111, 95, 109, 101, 115, 104, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 34, 58, 32, 123, 0};// ""KHR_draco_mesh_compression": {"
const_74 = (sbyte*)Marshal.AllocHGlobal(_const_74.Length);
fixed (sbyte* src = _const_74)
{
    Buffer.MemoryCopy(src, const_74, _const_74.Length, _const_74.Length);
}
sbyte[] _const_bufferView = new sbyte[] { 98, 117, 102, 102, 101, 114, 86, 105, 101, 119, 0};// "bufferView"
const_bufferView = (sbyte*)Marshal.AllocHGlobal(_const_bufferView.Length);
fixed (sbyte* src = _const_bufferView)
{
    Buffer.MemoryCopy(src, const_bufferView, _const_bufferView.Length, _const_bufferView.Length);
}
sbyte[] _const_76 = new sbyte[] { 34, 109, 97, 112, 112, 105, 110, 103, 115, 34, 58, 32, 91, 0};// ""mappings": ["
const_76 = (sbyte*)Marshal.AllocHGlobal(_const_76.Length);
fixed (sbyte* src = _const_76)
{
    Buffer.MemoryCopy(src, const_76, _const_76.Length, _const_76.Length);
}
sbyte[] _const_77 = new sbyte[] { 34, 118, 97, 114, 105, 97, 110, 116, 115, 34, 58, 32, 91, 37, 100, 93, 0};// ""variants": [%d]"
const_77 = (sbyte*)Marshal.AllocHGlobal(_const_77.Length);
fixed (sbyte* src = _const_77)
{
    Buffer.MemoryCopy(src, const_77, _const_77.Length, _const_77.Length);
}
sbyte[] _const_name = new sbyte[] { 110, 97, 109, 101, 0};// "name"
const_name = (sbyte*)Marshal.AllocHGlobal(_const_name.Length);
fixed (sbyte* src = _const_name)
{
    Buffer.MemoryCopy(src, const_name, _const_name.Length, _const_name.Length);
}
sbyte[] _const_79 = new sbyte[] { 34, 112, 114, 105, 109, 105, 116, 105, 118, 101, 115, 34, 58, 32, 91, 0};// ""primitives": ["
const_79 = (sbyte*)Marshal.AllocHGlobal(_const_79.Length);
fixed (sbyte* src = _const_79)
{
    Buffer.MemoryCopy(src, const_79, _const_79.Length, _const_79.Length);
}
sbyte[] _const_weights = new sbyte[] { 119, 101, 105, 103, 104, 116, 115, 0};// "weights"
const_weights = (sbyte*)Marshal.AllocHGlobal(_const_weights.Length);
fixed (sbyte* src = _const_weights)
{
    Buffer.MemoryCopy(src, const_weights, _const_weights.Length, _const_weights.Length);
}
sbyte[] _const_buffer = new sbyte[] { 98, 117, 102, 102, 101, 114, 0};// "buffer"
const_buffer = (sbyte*)Marshal.AllocHGlobal(_const_buffer.Length);
fixed (sbyte* src = _const_buffer)
{
    Buffer.MemoryCopy(src, const_buffer, _const_buffer.Length, _const_buffer.Length);
}
sbyte[] _const_byteLength = new sbyte[] { 98, 121, 116, 101, 76, 101, 110, 103, 116, 104, 0};// "byteLength"
const_byteLength = (sbyte*)Marshal.AllocHGlobal(_const_byteLength.Length);
fixed (sbyte* src = _const_byteLength)
{
    Buffer.MemoryCopy(src, const_byteLength, _const_byteLength.Length, _const_byteLength.Length);
}
sbyte[] _const_byteOffset = new sbyte[] { 98, 121, 116, 101, 79, 102, 102, 115, 101, 116, 0};// "byteOffset"
const_byteOffset = (sbyte*)Marshal.AllocHGlobal(_const_byteOffset.Length);
fixed (sbyte* src = _const_byteOffset)
{
    Buffer.MemoryCopy(src, const_byteOffset, _const_byteOffset.Length, _const_byteOffset.Length);
}
sbyte[] _const_byteStride = new sbyte[] { 98, 121, 116, 101, 83, 116, 114, 105, 100, 101, 0};// "byteStride"
const_byteStride = (sbyte*)Marshal.AllocHGlobal(_const_byteStride.Length);
fixed (sbyte* src = _const_byteStride)
{
    Buffer.MemoryCopy(src, const_byteStride, _const_byteStride.Length, _const_byteStride.Length);
}
sbyte[] _const_uri = new sbyte[] { 117, 114, 105, 0};// "uri"
const_uri = (sbyte*)Marshal.AllocHGlobal(_const_uri.Length);
fixed (sbyte* src = _const_uri)
{
    Buffer.MemoryCopy(src, const_uri, _const_uri.Length, _const_uri.Length);
}
sbyte[] _const_alphaCutoff = new sbyte[] { 97, 108, 112, 104, 97, 67, 117, 116, 111, 102, 102, 0};// "alphaCutoff"
const_alphaCutoff = (sbyte*)Marshal.AllocHGlobal(_const_alphaCutoff.Length);
fixed (sbyte* src = _const_alphaCutoff)
{
    Buffer.MemoryCopy(src, const_alphaCutoff, _const_alphaCutoff.Length, _const_alphaCutoff.Length);
}
sbyte[] _const_doubleSided = new sbyte[] { 100, 111, 117, 98, 108, 101, 83, 105, 100, 101, 100, 0};// "doubleSided"
const_doubleSided = (sbyte*)Marshal.AllocHGlobal(_const_doubleSided.Length);
fixed (sbyte* src = _const_doubleSided)
{
    Buffer.MemoryCopy(src, const_doubleSided, _const_doubleSided.Length, _const_doubleSided.Length);
}
sbyte[] _const_88 = new sbyte[] { 34, 112, 98, 114, 77, 101, 116, 97, 108, 108, 105, 99, 82, 111, 117, 103, 104, 110, 101, 115, 115, 34, 58, 32, 123, 0};// ""pbrMetallicRoughness": {"
const_88 = (sbyte*)Marshal.AllocHGlobal(_const_88.Length);
fixed (sbyte* src = _const_88)
{
    Buffer.MemoryCopy(src, const_88, _const_88.Length, _const_88.Length);
}
sbyte[] _const_89 = new sbyte[] { 34, 98, 97, 115, 101, 67, 111, 108, 111, 114, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""baseColorTexture": {"
const_89 = (sbyte*)Marshal.AllocHGlobal(_const_89.Length);
fixed (sbyte* src = _const_89)
{
    Buffer.MemoryCopy(src, const_89, _const_89.Length, _const_89.Length);
}
sbyte[] _const_index = new sbyte[] { 105, 110, 100, 101, 120, 0};// "index"
const_index = (sbyte*)Marshal.AllocHGlobal(_const_index.Length);
fixed (sbyte* src = _const_index)
{
    Buffer.MemoryCopy(src, const_index, _const_index.Length, _const_index.Length);
}
sbyte[] _const_91 = new sbyte[] { 34, 109, 101, 116, 97, 108, 108, 105, 99, 82, 111, 117, 103, 104, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""metallicRoughnessTexture": {"
const_91 = (sbyte*)Marshal.AllocHGlobal(_const_91.Length);
fixed (sbyte* src = _const_91)
{
    Buffer.MemoryCopy(src, const_91, _const_91.Length, _const_91.Length);
}
sbyte[] _const_metallicFactor = new sbyte[] { 109, 101, 116, 97, 108, 108, 105, 99, 70, 97, 99, 116, 111, 114, 0};// "metallicFactor"
const_metallicFactor = (sbyte*)Marshal.AllocHGlobal(_const_metallicFactor.Length);
fixed (sbyte* src = _const_metallicFactor)
{
    Buffer.MemoryCopy(src, const_metallicFactor, _const_metallicFactor.Length, _const_metallicFactor.Length);
}
sbyte[] _const_roughnessFactor = new sbyte[] { 114, 111, 117, 103, 104, 110, 101, 115, 115, 70, 97, 99, 116, 111, 114, 0};// "roughnessFactor"
const_roughnessFactor = (sbyte*)Marshal.AllocHGlobal(_const_roughnessFactor.Length);
fixed (sbyte* src = _const_roughnessFactor)
{
    Buffer.MemoryCopy(src, const_roughnessFactor, _const_roughnessFactor.Length, _const_roughnessFactor.Length);
}
sbyte[] _const_baseColorFactor = new sbyte[] { 98, 97, 115, 101, 67, 111, 108, 111, 114, 70, 97, 99, 116, 111, 114, 0};// "baseColorFactor"
const_baseColorFactor = (sbyte*)Marshal.AllocHGlobal(_const_baseColorFactor.Length);
fixed (sbyte* src = _const_baseColorFactor)
{
    Buffer.MemoryCopy(src, const_baseColorFactor, _const_baseColorFactor.Length, _const_baseColorFactor.Length);
}
sbyte[] _const_95 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 99, 108, 101, 97, 114, 99, 111, 97, 116, 34, 58, 32, 123, 0};// ""KHR_materials_clearcoat": {"
const_95 = (sbyte*)Marshal.AllocHGlobal(_const_95.Length);
fixed (sbyte* src = _const_95)
{
    Buffer.MemoryCopy(src, const_95, _const_95.Length, _const_95.Length);
}
sbyte[] _const_96 = new sbyte[] { 34, 99, 108, 101, 97, 114, 99, 111, 97, 116, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""clearcoatTexture": {"
const_96 = (sbyte*)Marshal.AllocHGlobal(_const_96.Length);
fixed (sbyte* src = _const_96)
{
    Buffer.MemoryCopy(src, const_96, _const_96.Length, _const_96.Length);
}
sbyte[] _const_97 = new sbyte[] { 34, 99, 108, 101, 97, 114, 99, 111, 97, 116, 82, 111, 117, 103, 104, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""clearcoatRoughnessTexture": {"
const_97 = (sbyte*)Marshal.AllocHGlobal(_const_97.Length);
fixed (sbyte* src = _const_97)
{
    Buffer.MemoryCopy(src, const_97, _const_97.Length, _const_97.Length);
}
sbyte[] _const_98 = new sbyte[] { 34, 99, 108, 101, 97, 114, 99, 111, 97, 116, 78, 111, 114, 109, 97, 108, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""clearcoatNormalTexture": {"
const_98 = (sbyte*)Marshal.AllocHGlobal(_const_98.Length);
fixed (sbyte* src = _const_98)
{
    Buffer.MemoryCopy(src, const_98, _const_98.Length, _const_98.Length);
}
sbyte[] _const_clearcoatFactor = new sbyte[] { 99, 108, 101, 97, 114, 99, 111, 97, 116, 70, 97, 99, 116, 111, 114, 0};// "clearcoatFactor"
const_clearcoatFactor = (sbyte*)Marshal.AllocHGlobal(_const_clearcoatFactor.Length);
fixed (sbyte* src = _const_clearcoatFactor)
{
    Buffer.MemoryCopy(src, const_clearcoatFactor, _const_clearcoatFactor.Length, _const_clearcoatFactor.Length);
}
sbyte[] _const_clearcoatRoughnessFactor = new sbyte[] { 99, 108, 101, 97, 114, 99, 111, 97, 116, 82, 111, 117, 103, 104, 110, 101, 115, 115, 70, 97, 99, 116, 111, 114, 0};// "clearcoatRoughnessFactor"
const_clearcoatRoughnessFactor = (sbyte*)Marshal.AllocHGlobal(_const_clearcoatRoughnessFactor.Length);
fixed (sbyte* src = _const_clearcoatRoughnessFactor)
{
    Buffer.MemoryCopy(src, const_clearcoatRoughnessFactor, _const_clearcoatRoughnessFactor.Length, _const_clearcoatRoughnessFactor.Length);
}
sbyte[] _const_101 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 105, 111, 114, 34, 58, 32, 123, 0};// ""KHR_materials_ior": {"
const_101 = (sbyte*)Marshal.AllocHGlobal(_const_101.Length);
fixed (sbyte* src = _const_101)
{
    Buffer.MemoryCopy(src, const_101, _const_101.Length, _const_101.Length);
}
sbyte[] _const_ior = new sbyte[] { 105, 111, 114, 0};// "ior"
const_ior = (sbyte*)Marshal.AllocHGlobal(_const_ior.Length);
fixed (sbyte* src = _const_ior)
{
    Buffer.MemoryCopy(src, const_ior, _const_ior.Length, _const_ior.Length);
}
sbyte[] _const_103 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 115, 112, 101, 99, 117, 108, 97, 114, 34, 58, 32, 123, 0};// ""KHR_materials_specular": {"
const_103 = (sbyte*)Marshal.AllocHGlobal(_const_103.Length);
fixed (sbyte* src = _const_103)
{
    Buffer.MemoryCopy(src, const_103, _const_103.Length, _const_103.Length);
}
sbyte[] _const_104 = new sbyte[] { 34, 115, 112, 101, 99, 117, 108, 97, 114, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""specularTexture": {"
const_104 = (sbyte*)Marshal.AllocHGlobal(_const_104.Length);
fixed (sbyte* src = _const_104)
{
    Buffer.MemoryCopy(src, const_104, _const_104.Length, _const_104.Length);
}
sbyte[] _const_105 = new sbyte[] { 34, 115, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""specularColorTexture": {"
const_105 = (sbyte*)Marshal.AllocHGlobal(_const_105.Length);
fixed (sbyte* src = _const_105)
{
    Buffer.MemoryCopy(src, const_105, _const_105.Length, _const_105.Length);
}
sbyte[] _const_specularFactor = new sbyte[] { 115, 112, 101, 99, 117, 108, 97, 114, 70, 97, 99, 116, 111, 114, 0};// "specularFactor"
const_specularFactor = (sbyte*)Marshal.AllocHGlobal(_const_specularFactor.Length);
fixed (sbyte* src = _const_specularFactor)
{
    Buffer.MemoryCopy(src, const_specularFactor, _const_specularFactor.Length, _const_specularFactor.Length);
}
sbyte[] _const_specularColorFactor = new sbyte[] { 115, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 70, 97, 99, 116, 111, 114, 0};// "specularColorFactor"
const_specularColorFactor = (sbyte*)Marshal.AllocHGlobal(_const_specularColorFactor.Length);
fixed (sbyte* src = _const_specularColorFactor)
{
    Buffer.MemoryCopy(src, const_specularColorFactor, _const_specularColorFactor.Length, _const_specularColorFactor.Length);
}
sbyte[] _const_108 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 34, 58, 32, 123, 0};// ""KHR_materials_transmission": {"
const_108 = (sbyte*)Marshal.AllocHGlobal(_const_108.Length);
fixed (sbyte* src = _const_108)
{
    Buffer.MemoryCopy(src, const_108, _const_108.Length, _const_108.Length);
}
sbyte[] _const_109 = new sbyte[] { 34, 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""transmissionTexture": {"
const_109 = (sbyte*)Marshal.AllocHGlobal(_const_109.Length);
fixed (sbyte* src = _const_109)
{
    Buffer.MemoryCopy(src, const_109, _const_109.Length, _const_109.Length);
}
sbyte[] _const_transmissionFactor = new sbyte[] { 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 70, 97, 99, 116, 111, 114, 0};// "transmissionFactor"
const_transmissionFactor = (sbyte*)Marshal.AllocHGlobal(_const_transmissionFactor.Length);
fixed (sbyte* src = _const_transmissionFactor)
{
    Buffer.MemoryCopy(src, const_transmissionFactor, _const_transmissionFactor.Length, _const_transmissionFactor.Length);
}
sbyte[] _const_111 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 118, 111, 108, 117, 109, 101, 34, 58, 32, 123, 0};// ""KHR_materials_volume": {"
const_111 = (sbyte*)Marshal.AllocHGlobal(_const_111.Length);
fixed (sbyte* src = _const_111)
{
    Buffer.MemoryCopy(src, const_111, _const_111.Length, _const_111.Length);
}
sbyte[] _const_112 = new sbyte[] { 34, 116, 104, 105, 99, 107, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""thicknessTexture": {"
const_112 = (sbyte*)Marshal.AllocHGlobal(_const_112.Length);
fixed (sbyte* src = _const_112)
{
    Buffer.MemoryCopy(src, const_112, _const_112.Length, _const_112.Length);
}
sbyte[] _const_thicknessFactor = new sbyte[] { 116, 104, 105, 99, 107, 110, 101, 115, 115, 70, 97, 99, 116, 111, 114, 0};// "thicknessFactor"
const_thicknessFactor = (sbyte*)Marshal.AllocHGlobal(_const_thicknessFactor.Length);
fixed (sbyte* src = _const_thicknessFactor)
{
    Buffer.MemoryCopy(src, const_thicknessFactor, _const_thicknessFactor.Length, _const_thicknessFactor.Length);
}
sbyte[] _const_attenuationColor = new sbyte[] { 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 67, 111, 108, 111, 114, 0};// "attenuationColor"
const_attenuationColor = (sbyte*)Marshal.AllocHGlobal(_const_attenuationColor.Length);
fixed (sbyte* src = _const_attenuationColor)
{
    Buffer.MemoryCopy(src, const_attenuationColor, _const_attenuationColor.Length, _const_attenuationColor.Length);
}
sbyte[] _const_attenuationDistance = new sbyte[] { 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 68, 105, 115, 116, 97, 110, 99, 101, 0};// "attenuationDistance"
const_attenuationDistance = (sbyte*)Marshal.AllocHGlobal(_const_attenuationDistance.Length);
fixed (sbyte* src = _const_attenuationDistance)
{
    Buffer.MemoryCopy(src, const_attenuationDistance, _const_attenuationDistance.Length, _const_attenuationDistance.Length);
}
sbyte[] _const_116 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 115, 104, 101, 101, 110, 34, 58, 32, 123, 0};// ""KHR_materials_sheen": {"
const_116 = (sbyte*)Marshal.AllocHGlobal(_const_116.Length);
fixed (sbyte* src = _const_116)
{
    Buffer.MemoryCopy(src, const_116, _const_116.Length, _const_116.Length);
}
sbyte[] _const_117 = new sbyte[] { 34, 115, 104, 101, 101, 110, 67, 111, 108, 111, 114, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""sheenColorTexture": {"
const_117 = (sbyte*)Marshal.AllocHGlobal(_const_117.Length);
fixed (sbyte* src = _const_117)
{
    Buffer.MemoryCopy(src, const_117, _const_117.Length, _const_117.Length);
}
sbyte[] _const_118 = new sbyte[] { 34, 115, 104, 101, 101, 110, 82, 111, 117, 103, 104, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""sheenRoughnessTexture": {"
const_118 = (sbyte*)Marshal.AllocHGlobal(_const_118.Length);
fixed (sbyte* src = _const_118)
{
    Buffer.MemoryCopy(src, const_118, _const_118.Length, _const_118.Length);
}
sbyte[] _const_sheenColorFactor = new sbyte[] { 115, 104, 101, 101, 110, 67, 111, 108, 111, 114, 70, 97, 99, 116, 111, 114, 0};// "sheenColorFactor"
const_sheenColorFactor = (sbyte*)Marshal.AllocHGlobal(_const_sheenColorFactor.Length);
fixed (sbyte* src = _const_sheenColorFactor)
{
    Buffer.MemoryCopy(src, const_sheenColorFactor, _const_sheenColorFactor.Length, _const_sheenColorFactor.Length);
}
sbyte[] _const_sheenRoughnessFactor = new sbyte[] { 115, 104, 101, 101, 110, 82, 111, 117, 103, 104, 110, 101, 115, 115, 70, 97, 99, 116, 111, 114, 0};// "sheenRoughnessFactor"
const_sheenRoughnessFactor = (sbyte*)Marshal.AllocHGlobal(_const_sheenRoughnessFactor.Length);
fixed (sbyte* src = _const_sheenRoughnessFactor)
{
    Buffer.MemoryCopy(src, const_sheenRoughnessFactor, _const_sheenRoughnessFactor.Length, _const_sheenRoughnessFactor.Length);
}
sbyte[] _const_121 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 112, 98, 114, 83, 112, 101, 99, 117, 108, 97, 114, 71, 108, 111, 115, 115, 105, 110, 101, 115, 115, 34, 58, 32, 123, 0};// ""KHR_materials_pbrSpecularGlossiness": {"
const_121 = (sbyte*)Marshal.AllocHGlobal(_const_121.Length);
fixed (sbyte* src = _const_121)
{
    Buffer.MemoryCopy(src, const_121, _const_121.Length, _const_121.Length);
}
sbyte[] _const_122 = new sbyte[] { 34, 100, 105, 102, 102, 117, 115, 101, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""diffuseTexture": {"
const_122 = (sbyte*)Marshal.AllocHGlobal(_const_122.Length);
fixed (sbyte* src = _const_122)
{
    Buffer.MemoryCopy(src, const_122, _const_122.Length, _const_122.Length);
}
sbyte[] _const_123 = new sbyte[] { 34, 115, 112, 101, 99, 117, 108, 97, 114, 71, 108, 111, 115, 115, 105, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""specularGlossinessTexture": {"
const_123 = (sbyte*)Marshal.AllocHGlobal(_const_123.Length);
fixed (sbyte* src = _const_123)
{
    Buffer.MemoryCopy(src, const_123, _const_123.Length, _const_123.Length);
}
sbyte[] _const_diffuseFactor = new sbyte[] { 100, 105, 102, 102, 117, 115, 101, 70, 97, 99, 116, 111, 114, 0};// "diffuseFactor"
const_diffuseFactor = (sbyte*)Marshal.AllocHGlobal(_const_diffuseFactor.Length);
fixed (sbyte* src = _const_diffuseFactor)
{
    Buffer.MemoryCopy(src, const_diffuseFactor, _const_diffuseFactor.Length, _const_diffuseFactor.Length);
}
sbyte[] _const_glossinessFactor = new sbyte[] { 103, 108, 111, 115, 115, 105, 110, 101, 115, 115, 70, 97, 99, 116, 111, 114, 0};// "glossinessFactor"
const_glossinessFactor = (sbyte*)Marshal.AllocHGlobal(_const_glossinessFactor.Length);
fixed (sbyte* src = _const_glossinessFactor)
{
    Buffer.MemoryCopy(src, const_glossinessFactor, _const_glossinessFactor.Length, _const_glossinessFactor.Length);
}
sbyte[] _const_126 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 117, 110, 108, 105, 116, 34, 58, 32, 123, 125, 0};// ""KHR_materials_unlit": {}"
const_126 = (sbyte*)Marshal.AllocHGlobal(_const_126.Length);
fixed (sbyte* src = _const_126)
{
    Buffer.MemoryCopy(src, const_126, _const_126.Length, _const_126.Length);
}
sbyte[] _const_127 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 101, 109, 105, 115, 115, 105, 118, 101, 95, 115, 116, 114, 101, 110, 103, 116, 104, 34, 58, 32, 123, 0};// ""KHR_materials_emissive_strength": {"
const_127 = (sbyte*)Marshal.AllocHGlobal(_const_127.Length);
fixed (sbyte* src = _const_127)
{
    Buffer.MemoryCopy(src, const_127, _const_127.Length, _const_127.Length);
}
sbyte[] _const_emissiveStrength = new sbyte[] { 101, 109, 105, 115, 115, 105, 118, 101, 83, 116, 114, 101, 110, 103, 116, 104, 0};// "emissiveStrength"
const_emissiveStrength = (sbyte*)Marshal.AllocHGlobal(_const_emissiveStrength.Length);
fixed (sbyte* src = _const_emissiveStrength)
{
    Buffer.MemoryCopy(src, const_emissiveStrength, _const_emissiveStrength.Length, _const_emissiveStrength.Length);
}
sbyte[] _const_129 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 34, 58, 32, 123, 0};// ""KHR_materials_iridescence": {"
const_129 = (sbyte*)Marshal.AllocHGlobal(_const_129.Length);
fixed (sbyte* src = _const_129)
{
    Buffer.MemoryCopy(src, const_129, _const_129.Length, _const_129.Length);
}
sbyte[] _const_iridescenceFactor = new sbyte[] { 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 70, 97, 99, 116, 111, 114, 0};// "iridescenceFactor"
const_iridescenceFactor = (sbyte*)Marshal.AllocHGlobal(_const_iridescenceFactor.Length);
fixed (sbyte* src = _const_iridescenceFactor)
{
    Buffer.MemoryCopy(src, const_iridescenceFactor, _const_iridescenceFactor.Length, _const_iridescenceFactor.Length);
}
sbyte[] _const_131 = new sbyte[] { 34, 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""iridescenceTexture": {"
const_131 = (sbyte*)Marshal.AllocHGlobal(_const_131.Length);
fixed (sbyte* src = _const_131)
{
    Buffer.MemoryCopy(src, const_131, _const_131.Length, _const_131.Length);
}
sbyte[] _const_iridescenceIor = new sbyte[] { 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 73, 111, 114, 0};// "iridescenceIor"
const_iridescenceIor = (sbyte*)Marshal.AllocHGlobal(_const_iridescenceIor.Length);
fixed (sbyte* src = _const_iridescenceIor)
{
    Buffer.MemoryCopy(src, const_iridescenceIor, _const_iridescenceIor.Length, _const_iridescenceIor.Length);
}
sbyte[] _const_iridescenceThicknessMinimum = new sbyte[] { 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 84, 104, 105, 99, 107, 110, 101, 115, 115, 77, 105, 110, 105, 109, 117, 109, 0};// "iridescenceThicknessMinimum"
const_iridescenceThicknessMinimum = (sbyte*)Marshal.AllocHGlobal(_const_iridescenceThicknessMinimum.Length);
fixed (sbyte* src = _const_iridescenceThicknessMinimum)
{
    Buffer.MemoryCopy(src, const_iridescenceThicknessMinimum, _const_iridescenceThicknessMinimum.Length, _const_iridescenceThicknessMinimum.Length);
}
sbyte[] _const_iridescenceThicknessMaximum = new sbyte[] { 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 84, 104, 105, 99, 107, 110, 101, 115, 115, 77, 97, 120, 105, 109, 117, 109, 0};// "iridescenceThicknessMaximum"
const_iridescenceThicknessMaximum = (sbyte*)Marshal.AllocHGlobal(_const_iridescenceThicknessMaximum.Length);
fixed (sbyte* src = _const_iridescenceThicknessMaximum)
{
    Buffer.MemoryCopy(src, const_iridescenceThicknessMaximum, _const_iridescenceThicknessMaximum.Length, _const_iridescenceThicknessMaximum.Length);
}
sbyte[] _const_135 = new sbyte[] { 34, 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 84, 104, 105, 99, 107, 110, 101, 115, 115, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""iridescenceThicknessTexture": {"
const_135 = (sbyte*)Marshal.AllocHGlobal(_const_135.Length);
fixed (sbyte* src = _const_135)
{
    Buffer.MemoryCopy(src, const_135, _const_135.Length, _const_135.Length);
}
sbyte[] _const_136 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 100, 105, 102, 102, 117, 115, 101, 95, 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 34, 58, 32, 123, 0};// ""KHR_materials_diffuse_transmission": {"
const_136 = (sbyte*)Marshal.AllocHGlobal(_const_136.Length);
fixed (sbyte* src = _const_136)
{
    Buffer.MemoryCopy(src, const_136, _const_136.Length, _const_136.Length);
}
sbyte[] _const_137 = new sbyte[] { 34, 100, 105, 102, 102, 117, 115, 101, 84, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""diffuseTransmissionTexture": {"
const_137 = (sbyte*)Marshal.AllocHGlobal(_const_137.Length);
fixed (sbyte* src = _const_137)
{
    Buffer.MemoryCopy(src, const_137, _const_137.Length, _const_137.Length);
}
sbyte[] _const_diffuseTransmissionFactor = new sbyte[] { 100, 105, 102, 102, 117, 115, 101, 84, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 70, 97, 99, 116, 111, 114, 0};// "diffuseTransmissionFactor"
const_diffuseTransmissionFactor = (sbyte*)Marshal.AllocHGlobal(_const_diffuseTransmissionFactor.Length);
fixed (sbyte* src = _const_diffuseTransmissionFactor)
{
    Buffer.MemoryCopy(src, const_diffuseTransmissionFactor, _const_diffuseTransmissionFactor.Length, _const_diffuseTransmissionFactor.Length);
}
sbyte[] _const_diffuseTransmissionColorFactor = new sbyte[] { 100, 105, 102, 102, 117, 115, 101, 84, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 67, 111, 108, 111, 114, 70, 97, 99, 116, 111, 114, 0};// "diffuseTransmissionColorFactor"
const_diffuseTransmissionColorFactor = (sbyte*)Marshal.AllocHGlobal(_const_diffuseTransmissionColorFactor.Length);
fixed (sbyte* src = _const_diffuseTransmissionColorFactor)
{
    Buffer.MemoryCopy(src, const_diffuseTransmissionColorFactor, _const_diffuseTransmissionColorFactor.Length, _const_diffuseTransmissionColorFactor.Length);
}
sbyte[] _const_140 = new sbyte[] { 34, 100, 105, 102, 102, 117, 115, 101, 84, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 67, 111, 108, 111, 114, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""diffuseTransmissionColorTexture": {"
const_140 = (sbyte*)Marshal.AllocHGlobal(_const_140.Length);
fixed (sbyte* src = _const_140)
{
    Buffer.MemoryCopy(src, const_140, _const_140.Length, _const_140.Length);
}
sbyte[] _const_141 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 97, 110, 105, 115, 111, 116, 114, 111, 112, 121, 34, 58, 32, 123, 0};// ""KHR_materials_anisotropy": {"
const_141 = (sbyte*)Marshal.AllocHGlobal(_const_141.Length);
fixed (sbyte* src = _const_141)
{
    Buffer.MemoryCopy(src, const_141, _const_141.Length, _const_141.Length);
}
sbyte[] _const_anisotropyFactor = new sbyte[] { 97, 110, 105, 115, 111, 116, 114, 111, 112, 121, 70, 97, 99, 116, 111, 114, 0};// "anisotropyFactor"
const_anisotropyFactor = (sbyte*)Marshal.AllocHGlobal(_const_anisotropyFactor.Length);
fixed (sbyte* src = _const_anisotropyFactor)
{
    Buffer.MemoryCopy(src, const_anisotropyFactor, _const_anisotropyFactor.Length, _const_anisotropyFactor.Length);
}
sbyte[] _const_anisotropyRotation = new sbyte[] { 97, 110, 105, 115, 111, 116, 114, 111, 112, 121, 82, 111, 116, 97, 116, 105, 111, 110, 0};// "anisotropyRotation"
const_anisotropyRotation = (sbyte*)Marshal.AllocHGlobal(_const_anisotropyRotation.Length);
fixed (sbyte* src = _const_anisotropyRotation)
{
    Buffer.MemoryCopy(src, const_anisotropyRotation, _const_anisotropyRotation.Length, _const_anisotropyRotation.Length);
}
sbyte[] _const_144 = new sbyte[] { 34, 97, 110, 105, 115, 111, 116, 114, 111, 112, 121, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""anisotropyTexture": {"
const_144 = (sbyte*)Marshal.AllocHGlobal(_const_144.Length);
fixed (sbyte* src = _const_144)
{
    Buffer.MemoryCopy(src, const_144, _const_144.Length, _const_144.Length);
}
sbyte[] _const_145 = new sbyte[] { 34, 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 100, 105, 115, 112, 101, 114, 115, 105, 111, 110, 34, 58, 32, 123, 0};// ""KHR_materials_dispersion": {"
const_145 = (sbyte*)Marshal.AllocHGlobal(_const_145.Length);
fixed (sbyte* src = _const_145)
{
    Buffer.MemoryCopy(src, const_145, _const_145.Length, _const_145.Length);
}
sbyte[] _const_dispersion = new sbyte[] { 100, 105, 115, 112, 101, 114, 115, 105, 111, 110, 0};// "dispersion"
const_dispersion = (sbyte*)Marshal.AllocHGlobal(_const_dispersion.Length);
fixed (sbyte* src = _const_dispersion)
{
    Buffer.MemoryCopy(src, const_dispersion, _const_dispersion.Length, _const_dispersion.Length);
}
sbyte[] _const_147 = new sbyte[] { 34, 110, 111, 114, 109, 97, 108, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""normalTexture": {"
const_147 = (sbyte*)Marshal.AllocHGlobal(_const_147.Length);
fixed (sbyte* src = _const_147)
{
    Buffer.MemoryCopy(src, const_147, _const_147.Length, _const_147.Length);
}
sbyte[] _const_148 = new sbyte[] { 34, 111, 99, 99, 108, 117, 115, 105, 111, 110, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""occlusionTexture": {"
const_148 = (sbyte*)Marshal.AllocHGlobal(_const_148.Length);
fixed (sbyte* src = _const_148)
{
    Buffer.MemoryCopy(src, const_148, _const_148.Length, _const_148.Length);
}
sbyte[] _const_strength = new sbyte[] { 115, 116, 114, 101, 110, 103, 116, 104, 0};// "strength"
const_strength = (sbyte*)Marshal.AllocHGlobal(_const_strength.Length);
fixed (sbyte* src = _const_strength)
{
    Buffer.MemoryCopy(src, const_strength, _const_strength.Length, _const_strength.Length);
}
sbyte[] _const_150 = new sbyte[] { 34, 101, 109, 105, 115, 115, 105, 118, 101, 84, 101, 120, 116, 117, 114, 101, 34, 58, 32, 123, 0};// ""emissiveTexture": {"
const_150 = (sbyte*)Marshal.AllocHGlobal(_const_150.Length);
fixed (sbyte* src = _const_150)
{
    Buffer.MemoryCopy(src, const_150, _const_150.Length, _const_150.Length);
}
sbyte[] _const_emissiveFactor = new sbyte[] { 101, 109, 105, 115, 115, 105, 118, 101, 70, 97, 99, 116, 111, 114, 0};// "emissiveFactor"
const_emissiveFactor = (sbyte*)Marshal.AllocHGlobal(_const_emissiveFactor.Length);
fixed (sbyte* src = _const_emissiveFactor)
{
    Buffer.MemoryCopy(src, const_emissiveFactor, _const_emissiveFactor.Length, _const_emissiveFactor.Length);
}
sbyte[] _const_alphaMode = new sbyte[] { 97, 108, 112, 104, 97, 77, 111, 100, 101, 0};// "alphaMode"
const_alphaMode = (sbyte*)Marshal.AllocHGlobal(_const_alphaMode.Length);
fixed (sbyte* src = _const_alphaMode)
{
    Buffer.MemoryCopy(src, const_alphaMode, _const_alphaMode.Length, _const_alphaMode.Length);
}
sbyte[] _const_mimeType = new sbyte[] { 109, 105, 109, 101, 84, 121, 112, 101, 0};// "mimeType"
const_mimeType = (sbyte*)Marshal.AllocHGlobal(_const_mimeType.Length);
fixed (sbyte* src = _const_mimeType)
{
    Buffer.MemoryCopy(src, const_mimeType, _const_mimeType.Length, _const_mimeType.Length);
}
sbyte[] _const_source = new sbyte[] { 115, 111, 117, 114, 99, 101, 0};// "source"
const_source = (sbyte*)Marshal.AllocHGlobal(_const_source.Length);
fixed (sbyte* src = _const_source)
{
    Buffer.MemoryCopy(src, const_source, _const_source.Length, _const_source.Length);
}
sbyte[] _const_sampler = new sbyte[] { 115, 97, 109, 112, 108, 101, 114, 0};// "sampler"
const_sampler = (sbyte*)Marshal.AllocHGlobal(_const_sampler.Length);
fixed (sbyte* src = _const_sampler)
{
    Buffer.MemoryCopy(src, const_sampler, _const_sampler.Length, _const_sampler.Length);
}
sbyte[] _const_156 = new sbyte[] { 34, 75, 72, 82, 95, 116, 101, 120, 116, 117, 114, 101, 95, 98, 97, 115, 105, 115, 117, 34, 58, 32, 123, 0};// ""KHR_texture_basisu": {"
const_156 = (sbyte*)Marshal.AllocHGlobal(_const_156.Length);
fixed (sbyte* src = _const_156)
{
    Buffer.MemoryCopy(src, const_156, _const_156.Length, _const_156.Length);
}
sbyte[] _const_157 = new sbyte[] { 34, 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 119, 101, 98, 112, 34, 58, 32, 123, 0};// ""EXT_texture_webp": {"
const_157 = (sbyte*)Marshal.AllocHGlobal(_const_157.Length);
fixed (sbyte* src = _const_157)
{
    Buffer.MemoryCopy(src, const_157, _const_157.Length, _const_157.Length);
}
sbyte[] _const_skeleton = new sbyte[] { 115, 107, 101, 108, 101, 116, 111, 110, 0};// "skeleton"
const_skeleton = (sbyte*)Marshal.AllocHGlobal(_const_skeleton.Length);
fixed (sbyte* src = _const_skeleton)
{
    Buffer.MemoryCopy(src, const_skeleton, _const_skeleton.Length, _const_skeleton.Length);
}
sbyte[] _const_inverseBindMatrices = new sbyte[] { 105, 110, 118, 101, 114, 115, 101, 66, 105, 110, 100, 77, 97, 116, 114, 105, 99, 101, 115, 0};// "inverseBindMatrices"
const_inverseBindMatrices = (sbyte*)Marshal.AllocHGlobal(_const_inverseBindMatrices.Length);
fixed (sbyte* src = _const_inverseBindMatrices)
{
    Buffer.MemoryCopy(src, const_inverseBindMatrices, _const_inverseBindMatrices.Length, _const_inverseBindMatrices.Length);
}
sbyte[] _const_joints = new sbyte[] { 106, 111, 105, 110, 116, 115, 0};// "joints"
const_joints = (sbyte*)Marshal.AllocHGlobal(_const_joints.Length);
fixed (sbyte* src = _const_joints)
{
    Buffer.MemoryCopy(src, const_joints, _const_joints.Length, _const_joints.Length);
}
sbyte[] _const_161 = new sbyte[] { 44, 0};// ","
const_161 = (sbyte*)Marshal.AllocHGlobal(_const_161.Length);
fixed (sbyte* src = _const_161)
{
    Buffer.MemoryCopy(src, const_161, _const_161.Length, _const_161.Length);
}
sbyte[] _const_162 = new sbyte[] { 32, 37, 100, 0};// " %d"
const_162 = (sbyte*)Marshal.AllocHGlobal(_const_162.Length);
fixed (sbyte* src = _const_162)
{
    Buffer.MemoryCopy(src, const_162, _const_162.Length, _const_162.Length);
}
sbyte[] _const_163 = new sbyte[] { 32, 93, 0};// " ]"
const_163 = (sbyte*)Marshal.AllocHGlobal(_const_163.Length);
fixed (sbyte* src = _const_163)
{
    Buffer.MemoryCopy(src, const_163, _const_163.Length, _const_163.Length);
}
sbyte[] _const_translation = new sbyte[] { 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 0};// "translation"
const_translation = (sbyte*)Marshal.AllocHGlobal(_const_translation.Length);
fixed (sbyte* src = _const_translation)
{
    Buffer.MemoryCopy(src, const_translation, _const_translation.Length, _const_translation.Length);
}
sbyte[] _const_invalid = new sbyte[] { 105, 110, 118, 97, 108, 105, 100, 0};// "invalid"
const_invalid = (sbyte*)Marshal.AllocHGlobal(_const_invalid.Length);
fixed (sbyte* src = _const_invalid)
{
    Buffer.MemoryCopy(src, const_invalid, _const_invalid.Length, _const_invalid.Length);
}
sbyte[] _const_LINEAR = new sbyte[] { 76, 73, 78, 69, 65, 82, 0};// "LINEAR"
const_LINEAR = (sbyte*)Marshal.AllocHGlobal(_const_LINEAR.Length);
fixed (sbyte* src = _const_LINEAR)
{
    Buffer.MemoryCopy(src, const_LINEAR, _const_LINEAR.Length, _const_LINEAR.Length);
}
sbyte[] _const_STEP = new sbyte[] { 83, 84, 69, 80, 0};// "STEP"
const_STEP = (sbyte*)Marshal.AllocHGlobal(_const_STEP.Length);
fixed (sbyte* src = _const_STEP)
{
    Buffer.MemoryCopy(src, const_STEP, _const_STEP.Length, _const_STEP.Length);
}
sbyte[] _const_CUBICSPLINE = new sbyte[] { 67, 85, 66, 73, 67, 83, 80, 76, 73, 78, 69, 0};// "CUBICSPLINE"
const_CUBICSPLINE = (sbyte*)Marshal.AllocHGlobal(_const_CUBICSPLINE.Length);
fixed (sbyte* src = _const_CUBICSPLINE)
{
    Buffer.MemoryCopy(src, const_CUBICSPLINE, _const_CUBICSPLINE.Length, _const_CUBICSPLINE.Length);
}
sbyte[] _const_interpolation = new sbyte[] { 105, 110, 116, 101, 114, 112, 111, 108, 97, 116, 105, 111, 110, 0};// "interpolation"
const_interpolation = (sbyte*)Marshal.AllocHGlobal(_const_interpolation.Length);
fixed (sbyte* src = _const_interpolation)
{
    Buffer.MemoryCopy(src, const_interpolation, _const_interpolation.Length, _const_interpolation.Length);
}
sbyte[] _const_input = new sbyte[] { 105, 110, 112, 117, 116, 0};// "input"
const_input = (sbyte*)Marshal.AllocHGlobal(_const_input.Length);
fixed (sbyte* src = _const_input)
{
    Buffer.MemoryCopy(src, const_input, _const_input.Length, _const_input.Length);
}
sbyte[] _const_output = new sbyte[] { 111, 117, 116, 112, 117, 116, 0};// "output"
const_output = (sbyte*)Marshal.AllocHGlobal(_const_output.Length);
fixed (sbyte* src = _const_output)
{
    Buffer.MemoryCopy(src, const_output, _const_output.Length, _const_output.Length);
}
sbyte[] _const_172 = new sbyte[] { 34, 116, 97, 114, 103, 101, 116, 34, 58, 32, 123, 0};// ""target": {"
const_172 = (sbyte*)Marshal.AllocHGlobal(_const_172.Length);
fixed (sbyte* src = _const_172)
{
    Buffer.MemoryCopy(src, const_172, _const_172.Length, _const_172.Length);
}
sbyte[] _const_node = new sbyte[] { 110, 111, 100, 101, 0};// "node"
const_node = (sbyte*)Marshal.AllocHGlobal(_const_node.Length);
fixed (sbyte* src = _const_node)
{
    Buffer.MemoryCopy(src, const_node, _const_node.Length, _const_node.Length);
}
sbyte[] _const_path = new sbyte[] { 112, 97, 116, 104, 0};// "path"
const_path = (sbyte*)Marshal.AllocHGlobal(_const_path.Length);
fixed (sbyte* src = _const_path)
{
    Buffer.MemoryCopy(src, const_path, _const_path.Length, _const_path.Length);
}
sbyte[] _const_175 = new sbyte[] { 34, 99, 104, 97, 110, 110, 101, 108, 115, 34, 58, 32, 91, 0};// ""channels": ["
const_175 = (sbyte*)Marshal.AllocHGlobal(_const_175.Length);
fixed (sbyte* src = _const_175)
{
    Buffer.MemoryCopy(src, const_175, _const_175.Length, _const_175.Length);
}
sbyte[] _const_magFilter = new sbyte[] { 109, 97, 103, 70, 105, 108, 116, 101, 114, 0};// "magFilter"
const_magFilter = (sbyte*)Marshal.AllocHGlobal(_const_magFilter.Length);
fixed (sbyte* src = _const_magFilter)
{
    Buffer.MemoryCopy(src, const_magFilter, _const_magFilter.Length, _const_magFilter.Length);
}
sbyte[] _const_minFilter = new sbyte[] { 109, 105, 110, 70, 105, 108, 116, 101, 114, 0};// "minFilter"
const_minFilter = (sbyte*)Marshal.AllocHGlobal(_const_minFilter.Length);
fixed (sbyte* src = _const_minFilter)
{
    Buffer.MemoryCopy(src, const_minFilter, _const_minFilter.Length, _const_minFilter.Length);
}
sbyte[] _const_wrapS = new sbyte[] { 119, 114, 97, 112, 83, 0};// "wrapS"
const_wrapS = (sbyte*)Marshal.AllocHGlobal(_const_wrapS.Length);
fixed (sbyte* src = _const_wrapS)
{
    Buffer.MemoryCopy(src, const_wrapS, _const_wrapS.Length, _const_wrapS.Length);
}
sbyte[] _const_wrapT = new sbyte[] { 119, 114, 97, 112, 84, 0};// "wrapT"
const_wrapT = (sbyte*)Marshal.AllocHGlobal(_const_wrapT.Length);
fixed (sbyte* src = _const_wrapT)
{
    Buffer.MemoryCopy(src, const_wrapT, _const_wrapT.Length, _const_wrapT.Length);
}
sbyte[] _const_children = new sbyte[] { 99, 104, 105, 108, 100, 114, 101, 110, 0};// "children"
const_children = (sbyte*)Marshal.AllocHGlobal(_const_children.Length);
fixed (sbyte* src = _const_children)
{
    Buffer.MemoryCopy(src, const_children, _const_children.Length, _const_children.Length);
}
sbyte[] _const_mesh = new sbyte[] { 109, 101, 115, 104, 0};// "mesh"
const_mesh = (sbyte*)Marshal.AllocHGlobal(_const_mesh.Length);
fixed (sbyte* src = _const_mesh)
{
    Buffer.MemoryCopy(src, const_mesh, _const_mesh.Length, _const_mesh.Length);
}
sbyte[] _const_matrix = new sbyte[] { 109, 97, 116, 114, 105, 120, 0};// "matrix"
const_matrix = (sbyte*)Marshal.AllocHGlobal(_const_matrix.Length);
fixed (sbyte* src = _const_matrix)
{
    Buffer.MemoryCopy(src, const_matrix, _const_matrix.Length, _const_matrix.Length);
}
sbyte[] _const_skin = new sbyte[] { 115, 107, 105, 110, 0};// "skin"
const_skin = (sbyte*)Marshal.AllocHGlobal(_const_skin.Length);
fixed (sbyte* src = _const_skin)
{
    Buffer.MemoryCopy(src, const_skin, _const_skin.Length, _const_skin.Length);
}
sbyte[] _const_light = new sbyte[] { 108, 105, 103, 104, 116, 0};// "light"
const_light = (sbyte*)Marshal.AllocHGlobal(_const_light.Length);
fixed (sbyte* src = _const_light)
{
    Buffer.MemoryCopy(src, const_light, _const_light.Length, _const_light.Length);
}
sbyte[] _const_185 = new sbyte[] { 34, 69, 88, 84, 95, 109, 101, 115, 104, 95, 103, 112, 117, 95, 105, 110, 115, 116, 97, 110, 99, 105, 110, 103, 34, 58, 32, 123, 0};// ""EXT_mesh_gpu_instancing": {"
const_185 = (sbyte*)Marshal.AllocHGlobal(_const_185.Length);
fixed (sbyte* src = _const_185)
{
    Buffer.MemoryCopy(src, const_185, _const_185.Length, _const_185.Length);
}
sbyte[] _const_camera = new sbyte[] { 99, 97, 109, 101, 114, 97, 0};// "camera"
const_camera = (sbyte*)Marshal.AllocHGlobal(_const_camera.Length);
fixed (sbyte* src = _const_camera)
{
    Buffer.MemoryCopy(src, const_camera, _const_camera.Length, _const_camera.Length);
}
sbyte[] _const_nodes = new sbyte[] { 110, 111, 100, 101, 115, 0};// "nodes"
const_nodes = (sbyte*)Marshal.AllocHGlobal(_const_nodes.Length);
fixed (sbyte* src = _const_nodes)
{
    Buffer.MemoryCopy(src, const_nodes, _const_nodes.Length, _const_nodes.Length);
}
sbyte[] _const_componentType = new sbyte[] { 99, 111, 109, 112, 111, 110, 101, 110, 116, 84, 121, 112, 101, 0};// "componentType"
const_componentType = (sbyte*)Marshal.AllocHGlobal(_const_componentType.Length);
fixed (sbyte* src = _const_componentType)
{
    Buffer.MemoryCopy(src, const_componentType, _const_componentType.Length, _const_componentType.Length);
}
sbyte[] _const_type = new sbyte[] { 116, 121, 112, 101, 0};// "type"
const_type = (sbyte*)Marshal.AllocHGlobal(_const_type.Length);
fixed (sbyte* src = _const_type)
{
    Buffer.MemoryCopy(src, const_type, _const_type.Length, _const_type.Length);
}
sbyte[] _const_normalized = new sbyte[] { 110, 111, 114, 109, 97, 108, 105, 122, 101, 100, 0};// "normalized"
const_normalized = (sbyte*)Marshal.AllocHGlobal(_const_normalized.Length);
fixed (sbyte* src = _const_normalized)
{
    Buffer.MemoryCopy(src, const_normalized, _const_normalized.Length, _const_normalized.Length);
}
sbyte[] _const_count = new sbyte[] { 99, 111, 117, 110, 116, 0};// "count"
const_count = (sbyte*)Marshal.AllocHGlobal(_const_count.Length);
fixed (sbyte* src = _const_count)
{
    Buffer.MemoryCopy(src, const_count, _const_count.Length, _const_count.Length);
}
sbyte[] _const_min = new sbyte[] { 109, 105, 110, 0};// "min"
const_min = (sbyte*)Marshal.AllocHGlobal(_const_min.Length);
fixed (sbyte* src = _const_min)
{
    Buffer.MemoryCopy(src, const_min, _const_min.Length, _const_min.Length);
}
sbyte[] _const_max = new sbyte[] { 109, 97, 120, 0};// "max"
const_max = (sbyte*)Marshal.AllocHGlobal(_const_max.Length);
fixed (sbyte* src = _const_max)
{
    Buffer.MemoryCopy(src, const_max, _const_max.Length, _const_max.Length);
}
sbyte[] _const_194 = new sbyte[] { 34, 115, 112, 97, 114, 115, 101, 34, 58, 32, 123, 0};// ""sparse": {"
const_194 = (sbyte*)Marshal.AllocHGlobal(_const_194.Length);
fixed (sbyte* src = _const_194)
{
    Buffer.MemoryCopy(src, const_194, _const_194.Length, _const_194.Length);
}
sbyte[] _const_195 = new sbyte[] { 34, 105, 110, 100, 105, 99, 101, 115, 34, 58, 32, 123, 0};// ""indices": {"
const_195 = (sbyte*)Marshal.AllocHGlobal(_const_195.Length);
fixed (sbyte* src = _const_195)
{
    Buffer.MemoryCopy(src, const_195, _const_195.Length, _const_195.Length);
}
sbyte[] _const_196 = new sbyte[] { 34, 118, 97, 108, 117, 101, 115, 34, 58, 32, 123, 0};// ""values": {"
const_196 = (sbyte*)Marshal.AllocHGlobal(_const_196.Length);
fixed (sbyte* src = _const_196)
{
    Buffer.MemoryCopy(src, const_196, _const_196.Length, _const_196.Length);
}
sbyte[] _const_197 = new sbyte[] { 34, 111, 114, 116, 104, 111, 103, 114, 97, 112, 104, 105, 99, 34, 58, 32, 123, 0};// ""orthographic": {"
const_197 = (sbyte*)Marshal.AllocHGlobal(_const_197.Length);
fixed (sbyte* src = _const_197)
{
    Buffer.MemoryCopy(src, const_197, _const_197.Length, _const_197.Length);
}
sbyte[] _const_xmag = new sbyte[] { 120, 109, 97, 103, 0};// "xmag"
const_xmag = (sbyte*)Marshal.AllocHGlobal(_const_xmag.Length);
fixed (sbyte* src = _const_xmag)
{
    Buffer.MemoryCopy(src, const_xmag, _const_xmag.Length, _const_xmag.Length);
}
sbyte[] _const_ymag = new sbyte[] { 121, 109, 97, 103, 0};// "ymag"
const_ymag = (sbyte*)Marshal.AllocHGlobal(_const_ymag.Length);
fixed (sbyte* src = _const_ymag)
{
    Buffer.MemoryCopy(src, const_ymag, _const_ymag.Length, _const_ymag.Length);
}
sbyte[] _const_zfar = new sbyte[] { 122, 102, 97, 114, 0};// "zfar"
const_zfar = (sbyte*)Marshal.AllocHGlobal(_const_zfar.Length);
fixed (sbyte* src = _const_zfar)
{
    Buffer.MemoryCopy(src, const_zfar, _const_zfar.Length, _const_zfar.Length);
}
sbyte[] _const_znear = new sbyte[] { 122, 110, 101, 97, 114, 0};// "znear"
const_znear = (sbyte*)Marshal.AllocHGlobal(_const_znear.Length);
fixed (sbyte* src = _const_znear)
{
    Buffer.MemoryCopy(src, const_znear, _const_znear.Length, _const_znear.Length);
}
sbyte[] _const_202 = new sbyte[] { 34, 112, 101, 114, 115, 112, 101, 99, 116, 105, 118, 101, 34, 58, 32, 123, 0};// ""perspective": {"
const_202 = (sbyte*)Marshal.AllocHGlobal(_const_202.Length);
fixed (sbyte* src = _const_202)
{
    Buffer.MemoryCopy(src, const_202, _const_202.Length, _const_202.Length);
}
sbyte[] _const_aspectRatio = new sbyte[] { 97, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0};// "aspectRatio"
const_aspectRatio = (sbyte*)Marshal.AllocHGlobal(_const_aspectRatio.Length);
fixed (sbyte* src = _const_aspectRatio)
{
    Buffer.MemoryCopy(src, const_aspectRatio, _const_aspectRatio.Length, _const_aspectRatio.Length);
}
sbyte[] _const_yfov = new sbyte[] { 121, 102, 111, 118, 0};// "yfov"
const_yfov = (sbyte*)Marshal.AllocHGlobal(_const_yfov.Length);
fixed (sbyte* src = _const_yfov)
{
    Buffer.MemoryCopy(src, const_yfov, _const_yfov.Length, _const_yfov.Length);
}
sbyte[] _const_color = new sbyte[] { 99, 111, 108, 111, 114, 0};// "color"
const_color = (sbyte*)Marshal.AllocHGlobal(_const_color.Length);
fixed (sbyte* src = _const_color)
{
    Buffer.MemoryCopy(src, const_color, _const_color.Length, _const_color.Length);
}
sbyte[] _const_intensity = new sbyte[] { 105, 110, 116, 101, 110, 115, 105, 116, 121, 0};// "intensity"
const_intensity = (sbyte*)Marshal.AllocHGlobal(_const_intensity.Length);
fixed (sbyte* src = _const_intensity)
{
    Buffer.MemoryCopy(src, const_intensity, _const_intensity.Length, _const_intensity.Length);
}
sbyte[] _const_range = new sbyte[] { 114, 97, 110, 103, 101, 0};// "range"
const_range = (sbyte*)Marshal.AllocHGlobal(_const_range.Length);
fixed (sbyte* src = _const_range)
{
    Buffer.MemoryCopy(src, const_range, _const_range.Length, _const_range.Length);
}
sbyte[] _const_208 = new sbyte[] { 34, 115, 112, 111, 116, 34, 58, 32, 123, 0};// ""spot": {"
const_208 = (sbyte*)Marshal.AllocHGlobal(_const_208.Length);
fixed (sbyte* src = _const_208)
{
    Buffer.MemoryCopy(src, const_208, _const_208.Length, _const_208.Length);
}
sbyte[] _const_innerConeAngle = new sbyte[] { 105, 110, 110, 101, 114, 67, 111, 110, 101, 65, 110, 103, 108, 101, 0};// "innerConeAngle"
const_innerConeAngle = (sbyte*)Marshal.AllocHGlobal(_const_innerConeAngle.Length);
fixed (sbyte* src = _const_innerConeAngle)
{
    Buffer.MemoryCopy(src, const_innerConeAngle, _const_innerConeAngle.Length, _const_innerConeAngle.Length);
}
sbyte[] _const_outerConeAngle = new sbyte[] { 111, 117, 116, 101, 114, 67, 111, 110, 101, 65, 110, 103, 108, 101, 0};// "outerConeAngle"
const_outerConeAngle = (sbyte*)Marshal.AllocHGlobal(_const_outerConeAngle.Length);
fixed (sbyte* src = _const_outerConeAngle)
{
    Buffer.MemoryCopy(src, const_outerConeAngle, _const_outerConeAngle.Length, _const_outerConeAngle.Length);
}
sbyte[] _const_KHR_texture_transform = new sbyte[] { 75, 72, 82, 95, 116, 101, 120, 116, 117, 114, 101, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 0};// "KHR_texture_transform"
const_KHR_texture_transform = (sbyte*)Marshal.AllocHGlobal(_const_KHR_texture_transform.Length);
fixed (sbyte* src = _const_KHR_texture_transform)
{
    Buffer.MemoryCopy(src, const_KHR_texture_transform, _const_KHR_texture_transform.Length, _const_KHR_texture_transform.Length);
}
sbyte[] _const_KHR_materials_unlit = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 117, 110, 108, 105, 116, 0};// "KHR_materials_unlit"
const_KHR_materials_unlit = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_unlit.Length);
fixed (sbyte* src = _const_KHR_materials_unlit)
{
    Buffer.MemoryCopy(src, const_KHR_materials_unlit, _const_KHR_materials_unlit.Length, _const_KHR_materials_unlit.Length);
}
sbyte[] _const_KHR_materials_pbrSpecularGlossiness = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 112, 98, 114, 83, 112, 101, 99, 117, 108, 97, 114, 71, 108, 111, 115, 115, 105, 110, 101, 115, 115, 0};// "KHR_materials_pbrSpecularGlossiness"
const_KHR_materials_pbrSpecularGlossiness = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_pbrSpecularGlossiness.Length);
fixed (sbyte* src = _const_KHR_materials_pbrSpecularGlossiness)
{
    Buffer.MemoryCopy(src, const_KHR_materials_pbrSpecularGlossiness, _const_KHR_materials_pbrSpecularGlossiness.Length, _const_KHR_materials_pbrSpecularGlossiness.Length);
}
sbyte[] _const_KHR_lights_punctual = new sbyte[] { 75, 72, 82, 95, 108, 105, 103, 104, 116, 115, 95, 112, 117, 110, 99, 116, 117, 97, 108, 0};// "KHR_lights_punctual"
const_KHR_lights_punctual = (sbyte*)Marshal.AllocHGlobal(_const_KHR_lights_punctual.Length);
fixed (sbyte* src = _const_KHR_lights_punctual)
{
    Buffer.MemoryCopy(src, const_KHR_lights_punctual, _const_KHR_lights_punctual.Length, _const_KHR_lights_punctual.Length);
}
sbyte[] _const_KHR_draco_mesh_compression = new sbyte[] { 75, 72, 82, 95, 100, 114, 97, 99, 111, 95, 109, 101, 115, 104, 95, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 0};// "KHR_draco_mesh_compression"
const_KHR_draco_mesh_compression = (sbyte*)Marshal.AllocHGlobal(_const_KHR_draco_mesh_compression.Length);
fixed (sbyte* src = _const_KHR_draco_mesh_compression)
{
    Buffer.MemoryCopy(src, const_KHR_draco_mesh_compression, _const_KHR_draco_mesh_compression.Length, _const_KHR_draco_mesh_compression.Length);
}
sbyte[] _const_KHR_materials_clearcoat = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 99, 108, 101, 97, 114, 99, 111, 97, 116, 0};// "KHR_materials_clearcoat"
const_KHR_materials_clearcoat = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_clearcoat.Length);
fixed (sbyte* src = _const_KHR_materials_clearcoat)
{
    Buffer.MemoryCopy(src, const_KHR_materials_clearcoat, _const_KHR_materials_clearcoat.Length, _const_KHR_materials_clearcoat.Length);
}
sbyte[] _const_KHR_materials_ior = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 105, 111, 114, 0};// "KHR_materials_ior"
const_KHR_materials_ior = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_ior.Length);
fixed (sbyte* src = _const_KHR_materials_ior)
{
    Buffer.MemoryCopy(src, const_KHR_materials_ior, _const_KHR_materials_ior.Length, _const_KHR_materials_ior.Length);
}
sbyte[] _const_KHR_materials_specular = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 115, 112, 101, 99, 117, 108, 97, 114, 0};// "KHR_materials_specular"
const_KHR_materials_specular = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_specular.Length);
fixed (sbyte* src = _const_KHR_materials_specular)
{
    Buffer.MemoryCopy(src, const_KHR_materials_specular, _const_KHR_materials_specular.Length, _const_KHR_materials_specular.Length);
}
sbyte[] _const_KHR_materials_transmission = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 0};// "KHR_materials_transmission"
const_KHR_materials_transmission = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_transmission.Length);
fixed (sbyte* src = _const_KHR_materials_transmission)
{
    Buffer.MemoryCopy(src, const_KHR_materials_transmission, _const_KHR_materials_transmission.Length, _const_KHR_materials_transmission.Length);
}
sbyte[] _const_KHR_materials_sheen = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 115, 104, 101, 101, 110, 0};// "KHR_materials_sheen"
const_KHR_materials_sheen = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_sheen.Length);
fixed (sbyte* src = _const_KHR_materials_sheen)
{
    Buffer.MemoryCopy(src, const_KHR_materials_sheen, _const_KHR_materials_sheen.Length, _const_KHR_materials_sheen.Length);
}
sbyte[] _const_KHR_materials_variants = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 118, 97, 114, 105, 97, 110, 116, 115, 0};// "KHR_materials_variants"
const_KHR_materials_variants = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_variants.Length);
fixed (sbyte* src = _const_KHR_materials_variants)
{
    Buffer.MemoryCopy(src, const_KHR_materials_variants, _const_KHR_materials_variants.Length, _const_KHR_materials_variants.Length);
}
sbyte[] _const_KHR_materials_volume = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 118, 111, 108, 117, 109, 101, 0};// "KHR_materials_volume"
const_KHR_materials_volume = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_volume.Length);
fixed (sbyte* src = _const_KHR_materials_volume)
{
    Buffer.MemoryCopy(src, const_KHR_materials_volume, _const_KHR_materials_volume.Length, _const_KHR_materials_volume.Length);
}
sbyte[] _const_KHR_texture_basisu = new sbyte[] { 75, 72, 82, 95, 116, 101, 120, 116, 117, 114, 101, 95, 98, 97, 115, 105, 115, 117, 0};// "KHR_texture_basisu"
const_KHR_texture_basisu = (sbyte*)Marshal.AllocHGlobal(_const_KHR_texture_basisu.Length);
fixed (sbyte* src = _const_KHR_texture_basisu)
{
    Buffer.MemoryCopy(src, const_KHR_texture_basisu, _const_KHR_texture_basisu.Length, _const_KHR_texture_basisu.Length);
}
sbyte[] _const_EXT_texture_webp = new sbyte[] { 69, 88, 84, 95, 116, 101, 120, 116, 117, 114, 101, 95, 119, 101, 98, 112, 0};// "EXT_texture_webp"
const_EXT_texture_webp = (sbyte*)Marshal.AllocHGlobal(_const_EXT_texture_webp.Length);
fixed (sbyte* src = _const_EXT_texture_webp)
{
    Buffer.MemoryCopy(src, const_EXT_texture_webp, _const_EXT_texture_webp.Length, _const_EXT_texture_webp.Length);
}
sbyte[] _const_KHR_materials_emissive_strength = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 101, 109, 105, 115, 115, 105, 118, 101, 95, 115, 116, 114, 101, 110, 103, 116, 104, 0};// "KHR_materials_emissive_strength"
const_KHR_materials_emissive_strength = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_emissive_strength.Length);
fixed (sbyte* src = _const_KHR_materials_emissive_strength)
{
    Buffer.MemoryCopy(src, const_KHR_materials_emissive_strength, _const_KHR_materials_emissive_strength.Length, _const_KHR_materials_emissive_strength.Length);
}
sbyte[] _const_KHR_materials_iridescence = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 105, 114, 105, 100, 101, 115, 99, 101, 110, 99, 101, 0};// "KHR_materials_iridescence"
const_KHR_materials_iridescence = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_iridescence.Length);
fixed (sbyte* src = _const_KHR_materials_iridescence)
{
    Buffer.MemoryCopy(src, const_KHR_materials_iridescence, _const_KHR_materials_iridescence.Length, _const_KHR_materials_iridescence.Length);
}
sbyte[] _const_KHR_materials_diffuse_transmission = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 100, 105, 102, 102, 117, 115, 101, 95, 116, 114, 97, 110, 115, 109, 105, 115, 115, 105, 111, 110, 0};// "KHR_materials_diffuse_transmission"
const_KHR_materials_diffuse_transmission = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_diffuse_transmission.Length);
fixed (sbyte* src = _const_KHR_materials_diffuse_transmission)
{
    Buffer.MemoryCopy(src, const_KHR_materials_diffuse_transmission, _const_KHR_materials_diffuse_transmission.Length, _const_KHR_materials_diffuse_transmission.Length);
}
sbyte[] _const_KHR_materials_anisotropy = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 97, 110, 105, 115, 111, 116, 114, 111, 112, 121, 0};// "KHR_materials_anisotropy"
const_KHR_materials_anisotropy = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_anisotropy.Length);
fixed (sbyte* src = _const_KHR_materials_anisotropy)
{
    Buffer.MemoryCopy(src, const_KHR_materials_anisotropy, _const_KHR_materials_anisotropy.Length, _const_KHR_materials_anisotropy.Length);
}
sbyte[] _const_EXT_mesh_gpu_instancing = new sbyte[] { 69, 88, 84, 95, 109, 101, 115, 104, 95, 103, 112, 117, 95, 105, 110, 115, 116, 97, 110, 99, 105, 110, 103, 0};// "EXT_mesh_gpu_instancing"
const_EXT_mesh_gpu_instancing = (sbyte*)Marshal.AllocHGlobal(_const_EXT_mesh_gpu_instancing.Length);
fixed (sbyte* src = _const_EXT_mesh_gpu_instancing)
{
    Buffer.MemoryCopy(src, const_EXT_mesh_gpu_instancing, _const_EXT_mesh_gpu_instancing.Length, _const_EXT_mesh_gpu_instancing.Length);
}
sbyte[] _const_KHR_materials_dispersion = new sbyte[] { 75, 72, 82, 95, 109, 97, 116, 101, 114, 105, 97, 108, 115, 95, 100, 105, 115, 112, 101, 114, 115, 105, 111, 110, 0};// "KHR_materials_dispersion"
const_KHR_materials_dispersion = (sbyte*)Marshal.AllocHGlobal(_const_KHR_materials_dispersion.Length);
fixed (sbyte* src = _const_KHR_materials_dispersion)
{
    Buffer.MemoryCopy(src, const_KHR_materials_dispersion, _const_KHR_materials_dispersion.Length, _const_KHR_materials_dispersion.Length);
}

}public static void ReleaseConst()
{
Marshal.FreeHGlobal((IntPtr)const_0);
Marshal.FreeHGlobal((IntPtr)const_1);
Marshal.FreeHGlobal((IntPtr)const_2);
Marshal.FreeHGlobal((IntPtr)const_3);
Marshal.FreeHGlobal((IntPtr)const_4);
Marshal.FreeHGlobal((IntPtr)const_5);
Marshal.FreeHGlobal((IntPtr)const_6);
Marshal.FreeHGlobal((IntPtr)const_7);
Marshal.FreeHGlobal((IntPtr)const_8);
Marshal.FreeHGlobal((IntPtr)const_9);
Marshal.FreeHGlobal((IntPtr)const_10);
Marshal.FreeHGlobal((IntPtr)const_11);
Marshal.FreeHGlobal((IntPtr)const_12);
Marshal.FreeHGlobal((IntPtr)const_13);
Marshal.FreeHGlobal((IntPtr)const_scene);
Marshal.FreeHGlobal((IntPtr)const_15);
Marshal.FreeHGlobal((IntPtr)const_16);
Marshal.FreeHGlobal((IntPtr)const_17);
Marshal.FreeHGlobal((IntPtr)const_18);
Marshal.FreeHGlobal((IntPtr)const_19);
Marshal.FreeHGlobal((IntPtr)const_20);
Marshal.FreeHGlobal((IntPtr)const_21);
Marshal.FreeHGlobal((IntPtr)const_22);
Marshal.FreeHGlobal((IntPtr)const_23);
Marshal.FreeHGlobal((IntPtr)const_24);
Marshal.FreeHGlobal((IntPtr)const_25);
Marshal.FreeHGlobal((IntPtr)const_26);
Marshal.FreeHGlobal((IntPtr)const_27);
Marshal.FreeHGlobal((IntPtr)const_28);
Marshal.FreeHGlobal((IntPtr)const_29);
Marshal.FreeHGlobal((IntPtr)const_30);
Marshal.FreeHGlobal((IntPtr)const_31);
Marshal.FreeHGlobal((IntPtr)const_32);
Marshal.FreeHGlobal((IntPtr)const_33);
Marshal.FreeHGlobal((IntPtr)const_34);
Marshal.FreeHGlobal((IntPtr)const_35);
Marshal.FreeHGlobal((IntPtr)const_36);
Marshal.FreeHGlobal((IntPtr)const_37);
Marshal.FreeHGlobal((IntPtr)const_38);
Marshal.FreeHGlobal((IntPtr)const_39);
Marshal.FreeHGlobal((IntPtr)const_40);
Marshal.FreeHGlobal((IntPtr)const_true);
Marshal.FreeHGlobal((IntPtr)const_false);
Marshal.FreeHGlobal((IntPtr)const_43);
Marshal.FreeHGlobal((IntPtr)const_44);
Marshal.FreeHGlobal((IntPtr)const_MASK);
Marshal.FreeHGlobal((IntPtr)const_BLEND);
Marshal.FreeHGlobal((IntPtr)const_SCALAR);
Marshal.FreeHGlobal((IntPtr)const_48);
Marshal.FreeHGlobal((IntPtr)const_49);
Marshal.FreeHGlobal((IntPtr)const_50);
Marshal.FreeHGlobal((IntPtr)const_51);
Marshal.FreeHGlobal((IntPtr)const_52);
Marshal.FreeHGlobal((IntPtr)const_53);
Marshal.FreeHGlobal((IntPtr)const_perspective);
Marshal.FreeHGlobal((IntPtr)const_orthographic);
Marshal.FreeHGlobal((IntPtr)const_directional);
Marshal.FreeHGlobal((IntPtr)const_point);
Marshal.FreeHGlobal((IntPtr)const_spot);
Marshal.FreeHGlobal((IntPtr)const_59);
Marshal.FreeHGlobal((IntPtr)const_offset);
Marshal.FreeHGlobal((IntPtr)const_rotation);
Marshal.FreeHGlobal((IntPtr)const_scale);
Marshal.FreeHGlobal((IntPtr)const_texCoord);
Marshal.FreeHGlobal((IntPtr)const_64);
Marshal.FreeHGlobal((IntPtr)const_copyright);
Marshal.FreeHGlobal((IntPtr)const_generator);
Marshal.FreeHGlobal((IntPtr)const_version);
Marshal.FreeHGlobal((IntPtr)const_min_version);
Marshal.FreeHGlobal((IntPtr)const_mode);
Marshal.FreeHGlobal((IntPtr)const_indices);
Marshal.FreeHGlobal((IntPtr)const_material);
Marshal.FreeHGlobal((IntPtr)const_72);
Marshal.FreeHGlobal((IntPtr)const_73);
Marshal.FreeHGlobal((IntPtr)const_74);
Marshal.FreeHGlobal((IntPtr)const_bufferView);
Marshal.FreeHGlobal((IntPtr)const_76);
Marshal.FreeHGlobal((IntPtr)const_77);
Marshal.FreeHGlobal((IntPtr)const_name);
Marshal.FreeHGlobal((IntPtr)const_79);
Marshal.FreeHGlobal((IntPtr)const_weights);
Marshal.FreeHGlobal((IntPtr)const_buffer);
Marshal.FreeHGlobal((IntPtr)const_byteLength);
Marshal.FreeHGlobal((IntPtr)const_byteOffset);
Marshal.FreeHGlobal((IntPtr)const_byteStride);
Marshal.FreeHGlobal((IntPtr)const_uri);
Marshal.FreeHGlobal((IntPtr)const_alphaCutoff);
Marshal.FreeHGlobal((IntPtr)const_doubleSided);
Marshal.FreeHGlobal((IntPtr)const_88);
Marshal.FreeHGlobal((IntPtr)const_89);
Marshal.FreeHGlobal((IntPtr)const_index);
Marshal.FreeHGlobal((IntPtr)const_91);
Marshal.FreeHGlobal((IntPtr)const_metallicFactor);
Marshal.FreeHGlobal((IntPtr)const_roughnessFactor);
Marshal.FreeHGlobal((IntPtr)const_baseColorFactor);
Marshal.FreeHGlobal((IntPtr)const_95);
Marshal.FreeHGlobal((IntPtr)const_96);
Marshal.FreeHGlobal((IntPtr)const_97);
Marshal.FreeHGlobal((IntPtr)const_98);
Marshal.FreeHGlobal((IntPtr)const_clearcoatFactor);
Marshal.FreeHGlobal((IntPtr)const_clearcoatRoughnessFactor);
Marshal.FreeHGlobal((IntPtr)const_101);
Marshal.FreeHGlobal((IntPtr)const_ior);
Marshal.FreeHGlobal((IntPtr)const_103);
Marshal.FreeHGlobal((IntPtr)const_104);
Marshal.FreeHGlobal((IntPtr)const_105);
Marshal.FreeHGlobal((IntPtr)const_specularFactor);
Marshal.FreeHGlobal((IntPtr)const_specularColorFactor);
Marshal.FreeHGlobal((IntPtr)const_108);
Marshal.FreeHGlobal((IntPtr)const_109);
Marshal.FreeHGlobal((IntPtr)const_transmissionFactor);
Marshal.FreeHGlobal((IntPtr)const_111);
Marshal.FreeHGlobal((IntPtr)const_112);
Marshal.FreeHGlobal((IntPtr)const_thicknessFactor);
Marshal.FreeHGlobal((IntPtr)const_attenuationColor);
Marshal.FreeHGlobal((IntPtr)const_attenuationDistance);
Marshal.FreeHGlobal((IntPtr)const_116);
Marshal.FreeHGlobal((IntPtr)const_117);
Marshal.FreeHGlobal((IntPtr)const_118);
Marshal.FreeHGlobal((IntPtr)const_sheenColorFactor);
Marshal.FreeHGlobal((IntPtr)const_sheenRoughnessFactor);
Marshal.FreeHGlobal((IntPtr)const_121);
Marshal.FreeHGlobal((IntPtr)const_122);
Marshal.FreeHGlobal((IntPtr)const_123);
Marshal.FreeHGlobal((IntPtr)const_diffuseFactor);
Marshal.FreeHGlobal((IntPtr)const_glossinessFactor);
Marshal.FreeHGlobal((IntPtr)const_126);
Marshal.FreeHGlobal((IntPtr)const_127);
Marshal.FreeHGlobal((IntPtr)const_emissiveStrength);
Marshal.FreeHGlobal((IntPtr)const_129);
Marshal.FreeHGlobal((IntPtr)const_iridescenceFactor);
Marshal.FreeHGlobal((IntPtr)const_131);
Marshal.FreeHGlobal((IntPtr)const_iridescenceIor);
Marshal.FreeHGlobal((IntPtr)const_iridescenceThicknessMinimum);
Marshal.FreeHGlobal((IntPtr)const_iridescenceThicknessMaximum);
Marshal.FreeHGlobal((IntPtr)const_135);
Marshal.FreeHGlobal((IntPtr)const_136);
Marshal.FreeHGlobal((IntPtr)const_137);
Marshal.FreeHGlobal((IntPtr)const_diffuseTransmissionFactor);
Marshal.FreeHGlobal((IntPtr)const_diffuseTransmissionColorFactor);
Marshal.FreeHGlobal((IntPtr)const_140);
Marshal.FreeHGlobal((IntPtr)const_141);
Marshal.FreeHGlobal((IntPtr)const_anisotropyFactor);
Marshal.FreeHGlobal((IntPtr)const_anisotropyRotation);
Marshal.FreeHGlobal((IntPtr)const_144);
Marshal.FreeHGlobal((IntPtr)const_145);
Marshal.FreeHGlobal((IntPtr)const_dispersion);
Marshal.FreeHGlobal((IntPtr)const_147);
Marshal.FreeHGlobal((IntPtr)const_148);
Marshal.FreeHGlobal((IntPtr)const_strength);
Marshal.FreeHGlobal((IntPtr)const_150);
Marshal.FreeHGlobal((IntPtr)const_emissiveFactor);
Marshal.FreeHGlobal((IntPtr)const_alphaMode);
Marshal.FreeHGlobal((IntPtr)const_mimeType);
Marshal.FreeHGlobal((IntPtr)const_source);
Marshal.FreeHGlobal((IntPtr)const_sampler);
Marshal.FreeHGlobal((IntPtr)const_156);
Marshal.FreeHGlobal((IntPtr)const_157);
Marshal.FreeHGlobal((IntPtr)const_skeleton);
Marshal.FreeHGlobal((IntPtr)const_inverseBindMatrices);
Marshal.FreeHGlobal((IntPtr)const_joints);
Marshal.FreeHGlobal((IntPtr)const_161);
Marshal.FreeHGlobal((IntPtr)const_162);
Marshal.FreeHGlobal((IntPtr)const_163);
Marshal.FreeHGlobal((IntPtr)const_translation);
Marshal.FreeHGlobal((IntPtr)const_invalid);
Marshal.FreeHGlobal((IntPtr)const_LINEAR);
Marshal.FreeHGlobal((IntPtr)const_STEP);
Marshal.FreeHGlobal((IntPtr)const_CUBICSPLINE);
Marshal.FreeHGlobal((IntPtr)const_interpolation);
Marshal.FreeHGlobal((IntPtr)const_input);
Marshal.FreeHGlobal((IntPtr)const_output);
Marshal.FreeHGlobal((IntPtr)const_172);
Marshal.FreeHGlobal((IntPtr)const_node);
Marshal.FreeHGlobal((IntPtr)const_path);
Marshal.FreeHGlobal((IntPtr)const_175);
Marshal.FreeHGlobal((IntPtr)const_magFilter);
Marshal.FreeHGlobal((IntPtr)const_minFilter);
Marshal.FreeHGlobal((IntPtr)const_wrapS);
Marshal.FreeHGlobal((IntPtr)const_wrapT);
Marshal.FreeHGlobal((IntPtr)const_children);
Marshal.FreeHGlobal((IntPtr)const_mesh);
Marshal.FreeHGlobal((IntPtr)const_matrix);
Marshal.FreeHGlobal((IntPtr)const_skin);
Marshal.FreeHGlobal((IntPtr)const_light);
Marshal.FreeHGlobal((IntPtr)const_185);
Marshal.FreeHGlobal((IntPtr)const_camera);
Marshal.FreeHGlobal((IntPtr)const_nodes);
Marshal.FreeHGlobal((IntPtr)const_componentType);
Marshal.FreeHGlobal((IntPtr)const_type);
Marshal.FreeHGlobal((IntPtr)const_normalized);
Marshal.FreeHGlobal((IntPtr)const_count);
Marshal.FreeHGlobal((IntPtr)const_min);
Marshal.FreeHGlobal((IntPtr)const_max);
Marshal.FreeHGlobal((IntPtr)const_194);
Marshal.FreeHGlobal((IntPtr)const_195);
Marshal.FreeHGlobal((IntPtr)const_196);
Marshal.FreeHGlobal((IntPtr)const_197);
Marshal.FreeHGlobal((IntPtr)const_xmag);
Marshal.FreeHGlobal((IntPtr)const_ymag);
Marshal.FreeHGlobal((IntPtr)const_zfar);
Marshal.FreeHGlobal((IntPtr)const_znear);
Marshal.FreeHGlobal((IntPtr)const_202);
Marshal.FreeHGlobal((IntPtr)const_aspectRatio);
Marshal.FreeHGlobal((IntPtr)const_yfov);
Marshal.FreeHGlobal((IntPtr)const_color);
Marshal.FreeHGlobal((IntPtr)const_intensity);
Marshal.FreeHGlobal((IntPtr)const_range);
Marshal.FreeHGlobal((IntPtr)const_208);
Marshal.FreeHGlobal((IntPtr)const_innerConeAngle);
Marshal.FreeHGlobal((IntPtr)const_outerConeAngle);
Marshal.FreeHGlobal((IntPtr)const_KHR_texture_transform);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_unlit);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_pbrSpecularGlossiness);
Marshal.FreeHGlobal((IntPtr)const_KHR_lights_punctual);
Marshal.FreeHGlobal((IntPtr)const_KHR_draco_mesh_compression);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_clearcoat);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_ior);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_specular);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_transmission);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_sheen);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_variants);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_volume);
Marshal.FreeHGlobal((IntPtr)const_KHR_texture_basisu);
Marshal.FreeHGlobal((IntPtr)const_EXT_texture_webp);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_emissive_strength);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_iridescence);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_diffuse_transmission);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_anisotropy);
Marshal.FreeHGlobal((IntPtr)const_EXT_mesh_gpu_instancing);
Marshal.FreeHGlobal((IntPtr)const_KHR_materials_dispersion);

}public static ulong cgltf_write(cgltf_options* options, sbyte* buffer, ulong size, cgltf_data* data)
{
    cgltf_write_context ctx = new cgltf_write_context();
    ctx.buffer = buffer;
    ctx.buffer_size = (ulong)(size);
    ctx.remaining = (ulong)(size);
    ctx.cursor = buffer;
    ctx.chars_written = (ulong)(0);
    ctx.data = data;
    ctx.depth = (int)(1);
    ctx.indent = const_0;
    ctx.needs_comma = (int)(0);
    ctx.extension_flags = (uint)(0);
    ctx.required_extension_flags = (uint)(0);
    cgltf_write_context* context = &ctx;
    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_3));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    if ((data->accessors_count) > (0))
    {
        cgltf_write_line(context, const_4);
        for (ulong i = (ulong)(0); (i) < (data->accessors_count); ++i)
        {
            cgltf_write_accessor(context, data->accessors + i);
        }

        cgltf_write_line(context, const_5);
    }

    cgltf_write_asset(context, &data->asset);
    if ((data->buffer_views_count) > (0))
    {
        cgltf_write_line(context, const_6);
        for (ulong i = (ulong)(0); (i) < (data->buffer_views_count); ++i)
        {
            cgltf_write_buffer_view(context, data->buffer_views + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->buffers_count) > (0))
    {
        cgltf_write_line(context, const_7);
        for (ulong i = (ulong)(0); (i) < (data->buffers_count); ++i)
        {
            cgltf_write_buffer(context, data->buffers + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->images_count) > (0))
    {
        cgltf_write_line(context, const_8);
        for (ulong i = (ulong)(0); (i) < (data->images_count); ++i)
        {
            cgltf_write_image(context, data->images + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->meshes_count) > (0))
    {
        cgltf_write_line(context, const_9);
        for (ulong i = (ulong)(0); (i) < (data->meshes_count); ++i)
        {
            cgltf_write_mesh(context, data->meshes + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->materials_count) > (0))
    {
        cgltf_write_line(context, const_10);
        for (ulong i = (ulong)(0); (i) < (data->materials_count); ++i)
        {
            cgltf_write_material(context, data->materials + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->nodes_count) > (0))
    {
        cgltf_write_line(context, const_11);
        for (ulong i = (ulong)(0); (i) < (data->nodes_count); ++i)
        {
            cgltf_write_node(context, data->nodes + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->samplers_count) > (0))
    {
        cgltf_write_line(context, const_12);
        for (ulong i = (ulong)(0); (i) < (data->samplers_count); ++i)
        {
            cgltf_write_sampler(context, data->samplers + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->scene) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_scene, (int)(data->scene - data->scenes)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((data->scenes_count) > (0))
    {
        cgltf_write_line(context, const_15);
        for (ulong i = (ulong)(0); (i) < (data->scenes_count); ++i)
        {
            cgltf_write_scene(context, data->scenes + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->textures_count) > (0))
    {
        cgltf_write_line(context, const_16);
        for (ulong i = (ulong)(0); (i) < (data->textures_count); ++i)
        {
            cgltf_write_texture(context, data->textures + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->skins_count) > (0))
    {
        cgltf_write_line(context, const_17);
        for (ulong i = (ulong)(0); (i) < (data->skins_count); ++i)
        {
            cgltf_write_skin(context, data->skins + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->animations_count) > (0))
    {
        cgltf_write_line(context, const_18);
        for (ulong i = (ulong)(0); (i) < (data->animations_count); ++i)
        {
            cgltf_write_animation(context, data->animations + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((data->cameras_count) > (0))
    {
        cgltf_write_line(context, const_19);
        for (ulong i = (ulong)(0); (i) < (data->cameras_count); ++i)
        {
            cgltf_write_camera(context, data->cameras + i);
        }

        cgltf_write_line(context, const_5);
    }

    if (((data->lights_count) > (0)) || ((data->variants_count) > (0)))
    {
        cgltf_write_line(context, const_20);
        if ((data->lights_count) > (0))
        {
            cgltf_write_line(context, const_21);
            cgltf_write_line(context, const_22);
            for (ulong i = (ulong)(0); (i) < (data->lights_count); ++i)
            {
                cgltf_write_light(context, data->lights + i);
            }

            cgltf_write_line(context, const_5);
            cgltf_write_line(context, const_23);
        }

        if ((data->variants_count) != 0)
        {
            cgltf_write_line(context, const_24);
            cgltf_write_line(context, const_25);
            for (ulong i = (ulong)(0); (i) < (data->variants_count); ++i)
            {
                cgltf_write_variant(context, data->variants + i);
            }

            cgltf_write_line(context, const_5);
            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_23);
    }

    if (context->extension_flags != 0)
    {
        cgltf_write_line(context, const_26);
        cgltf_write_extensions(context, (uint)(context->extension_flags));
        cgltf_write_line(context, const_5);
    }

    if (context->required_extension_flags != 0)
    {
        cgltf_write_line(context, const_27);
        cgltf_write_extensions(context, (uint)(context->required_extension_flags));
        cgltf_write_line(context, const_5);
    }

    cgltf_write_extras(context, &data->extras);
    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_28));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    return (ulong)(1 + ctx.chars_written);
}
public static void cgltf_write_indent(cgltf_write_context* context)
{
    if ((context->needs_comma) != 0)
    {
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_29));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(0);
    }
    else
    {
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_30));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }
    }

    for (int i = (int)(0); (i) < (context->depth); ++i)
    {
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_31, context->indent));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }
    }
}
public static void cgltf_write_line(cgltf_write_context* context, sbyte* line)
{
    if (((line[0]) == (93)) || ((line[0]) == (125)))
    {
        --context->depth;
        context->needs_comma = (int)(0);
    }

    cgltf_write_indent(context);
    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_31, line));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    ulong last = (ulong)(CRuntime.strlen(line) - 1);
    if (((line[0]) == (93)) || ((line[0]) == (125)))
    {
        context->needs_comma = (int)(1);
    }

    if (((line[last]) == (91)) || ((line[last]) == (123)))
    {
        ++context->depth;
        context->needs_comma = (int)(0);
    }
}
public static void cgltf_write_strprop(cgltf_write_context* context, sbyte* label, sbyte* val)
{
    if ((val) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_32, label, val));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }
}
public static void cgltf_write_extras(cgltf_write_context* context, cgltf_extras* extras)
{
    if ((extras->data) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_33, extras->data));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }
    else
    {
        ulong length = (ulong)(extras->end_offset - extras->start_offset);
        if (((length) > (0)) && ((context->data->json) != null))
        {
            sbyte* json_string = (context->data->json) + extras->start_offset;
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_31, const_34));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)((length + 1) < (context->remaining) ? length + 1 : context->remaining), const_35, (int)(extras->end_offset - extras->start_offset), json_string));
                context->chars_written += (ulong)(length);
                if ((context->cursor) != null)
                {
                    context->cursor += length;
                    context->remaining -= (ulong)(length);
                }
            }

            context->needs_comma = (int)(1);
        }
    }
}
public static void cgltf_write_stritem(cgltf_write_context* context, sbyte* item)
{
    cgltf_write_indent(context);
    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_36, item));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    context->needs_comma = (int)(1);
}
public static void cgltf_write_intprop(cgltf_write_context* context, sbyte* label, int val, int def)
{
    if (val != def)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, label, (int)(val)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }
}
public static void cgltf_write_sizeprop(cgltf_write_context* context, sbyte* label, ulong val, ulong def)
{
    if (val != def)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_37, label, (ulong)(val)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }
}
public static void cgltf_write_floatprop(cgltf_write_context* context, sbyte* label, float val, float def)
{
    if (val != def)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_38, label));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_39, (int)(9), (double)(val)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
        if ((context->cursor) != null)
        {
            sbyte* decimal_comma = CRuntime.strchr(context->cursor - context->tmp, (int)(44));
            if ((decimal_comma) != null)
            {
                *decimal_comma = (sbyte)(46);
            }
        }
    }
}
public static void cgltf_write_boolprop_optional(cgltf_write_context* context, sbyte* label, bool val, bool def)
{
    if (val != def)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_40, label, (val) != true ? const_true : const_false));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }
}
public static void cgltf_write_floatarrayprop(cgltf_write_context* context, sbyte* label, float* vals, ulong dim)
{
    cgltf_write_indent(context);
    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_43, label));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    for (ulong i = (ulong)(0); (i) < (dim); ++i)
    {
        if (i != 0)
        {
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_44, (int)(9), (double)(vals[i])));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }
        }
        else
        {
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_39, (int)(9), (double)(vals[i])));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }
        }
    }

    {
        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_5));
        context->chars_written += (ulong)(context->tmp);
        if ((context->cursor) != null)
        {
            context->cursor += context->tmp;
            context->remaining -= (ulong)(context->tmp);
        }
    }

    context->needs_comma = (int)(1);
}
public static int cgltf_int_from_component_type(cgltf_component_type ctype)
{
    switch (ctype)
    {
        case cgltf_component_type.cgltf_component_type_r_8:
            return (int)(5120);
        case cgltf_component_type.cgltf_component_type_r_8u:
            return (int)(5121);
        case cgltf_component_type.cgltf_component_type_r_16:
            return (int)(5122);
        case cgltf_component_type.cgltf_component_type_r_16u:
            return (int)(5123);
        case cgltf_component_type.cgltf_component_type_r_32u:
            return (int)(5125);
        case cgltf_component_type.cgltf_component_type_r_32f:
            return (int)(5126);
        default:
            return (int)(0);
    }
}
public static int cgltf_int_from_primitive_type(cgltf_primitive_type ctype)
{
    switch (ctype)
    {
        case cgltf_primitive_type.cgltf_primitive_type_points:
            return (int)(0);
        case cgltf_primitive_type.cgltf_primitive_type_lines:
            return (int)(1);
        case cgltf_primitive_type.cgltf_primitive_type_line_loop:
            return (int)(2);
        case cgltf_primitive_type.cgltf_primitive_type_line_strip:
            return (int)(3);
        case cgltf_primitive_type.cgltf_primitive_type_triangles:
            return (int)(4);
        case cgltf_primitive_type.cgltf_primitive_type_triangle_strip:
            return (int)(5);
        case cgltf_primitive_type.cgltf_primitive_type_triangle_fan:
            return (int)(6);
        default:
            return (int)(-1);
    }
}
public static sbyte* cgltf_str_from_alpha_mode(cgltf_alpha_mode alpha_mode)
{
    switch (alpha_mode)
    {
        case cgltf_alpha_mode.cgltf_alpha_mode_mask:
            return const_MASK;
        case cgltf_alpha_mode.cgltf_alpha_mode_blend:
            return const_BLEND;
        default:
            return null;
    }
}
public static sbyte* cgltf_str_from_type(cgltf_type type)
{
    switch (type)
    {
        case cgltf_type.cgltf_type_scalar:
            return const_SCALAR;
        case cgltf_type.cgltf_type_vec2:
            return const_48;
        case cgltf_type.cgltf_type_vec3:
            return const_49;
        case cgltf_type.cgltf_type_vec4:
            return const_50;
        case cgltf_type.cgltf_type_mat2:
            return const_51;
        case cgltf_type.cgltf_type_mat3:
            return const_52;
        case cgltf_type.cgltf_type_mat4:
            return const_53;
        default:
            return null;
    }
}
public static ulong cgltf_dim_from_type(cgltf_type type)
{
    switch (type)
    {
        case cgltf_type.cgltf_type_scalar:
            return (ulong)(1);
        case cgltf_type.cgltf_type_vec2:
            return (ulong)(2);
        case cgltf_type.cgltf_type_vec3:
            return (ulong)(3);
        case cgltf_type.cgltf_type_vec4:
            return (ulong)(4);
        case cgltf_type.cgltf_type_mat2:
            return (ulong)(4);
        case cgltf_type.cgltf_type_mat3:
            return (ulong)(9);
        case cgltf_type.cgltf_type_mat4:
            return (ulong)(16);
        default:
            return (ulong)(0);
    }
}
public static sbyte* cgltf_str_from_camera_type(cgltf_camera_type camera_type)
{
    switch (camera_type)
    {
        case cgltf_camera_type.cgltf_camera_type_perspective:
            return const_perspective;
        case cgltf_camera_type.cgltf_camera_type_orthographic:
            return const_orthographic;
        default:
            return null;
    }
}
public static sbyte* cgltf_str_from_light_type(cgltf_light_type light_type)
{
    switch (light_type)
    {
        case cgltf_light_type.cgltf_light_type_directional:
            return const_directional;
        case cgltf_light_type.cgltf_light_type_point:
            return const_point;
        case cgltf_light_type.cgltf_light_type_spot:
            return const_spot;
        default:
            return null;
    }
}
public static void cgltf_write_texture_transform(cgltf_write_context* context, cgltf_texture_transform* transform)
{
    cgltf_write_line(context, const_20);
    cgltf_write_line(context, const_59);
    if ((cgltf_check_floatarray(transform->offset, (int)(2), (float)(0.0f))) != 0)
    {
        cgltf_write_floatarrayprop(context, const_offset, transform->offset, (ulong)(2));
    }

    cgltf_write_floatprop(context, const_rotation, (float)(transform->rotation), (float)(0.0f));
    if ((cgltf_check_floatarray(transform->scale, (int)(2), (float)(1.0f))) != 0)
    {
        cgltf_write_floatarrayprop(context, const_scale, transform->scale, (ulong)(2));
    }

    if ((transform->has_texcoord) != 0)
    {
        cgltf_write_intprop(context, const_texCoord, (int)(transform->texcoord), (int)(-1));
    }

    cgltf_write_line(context, const_23);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_asset(cgltf_write_context* context, cgltf_asset* asset)
{
    cgltf_write_line(context, const_64);
    cgltf_write_strprop(context, const_copyright, asset->copyright);
    cgltf_write_strprop(context, const_generator, asset->generator);
    cgltf_write_strprop(context, const_version, asset->version);
    cgltf_write_strprop(context, const_min_version, asset->min_version);
    cgltf_write_extras(context, &asset->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_primitive(cgltf_write_context* context, cgltf_primitive* prim)
{
    cgltf_write_intprop(context, const_mode, (int)(cgltf_int_from_primitive_type((cgltf_primitive_type)(prim->type))), (int)(4));
    if ((prim->indices) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_indices, (int)(prim->indices - context->data->accessors)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((prim->material) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_material, (int)(prim->material - context->data->materials)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_line(context, const_72);
    for (ulong i = (ulong)(0); (i) < (prim->attributes_count); ++i)
    {
        cgltf_attribute* attr = prim->attributes + i;
        if ((attr->data) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, attr->name, (int)(attr->data - context->data->accessors)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }
    }

    cgltf_write_line(context, const_23);
    if ((prim->targets_count) != 0)
    {
        cgltf_write_line(context, const_73);
        for (ulong i = (ulong)(0); (i) < (prim->targets_count); ++i)
        {
            cgltf_write_line(context, const_3);
            for (ulong j = (ulong)(0); (j) < (prim->targets[i].attributes_count); ++j)
            {
                cgltf_attribute* attr = prim->targets[i].attributes + j;
                if ((attr->data) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, attr->name, (int)(attr->data - context->data->accessors)));
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }
            }

            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_5);
    }

    cgltf_write_extras(context, &prim->extras);
    if (((prim->has_draco_mesh_compression) != 0) || ((prim->mappings_count) > (0)))
    {
        cgltf_write_line(context, const_20);
        if ((prim->has_draco_mesh_compression) != 0)
        {
            context->extension_flags |= (uint)(1 << 4);
            if (((prim->attributes_count) == (0)) || ((prim->indices) == (null)))
            {
                context->required_extension_flags |= (uint)(1 << 4);
            }

            cgltf_write_line(context, const_74);
            if ((prim->draco_mesh_compression.buffer_view) != null)
            {
                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_bufferView, (int)(prim->draco_mesh_compression.buffer_view - context->data->buffer_views)));
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
            }

            cgltf_write_line(context, const_72);
            for (ulong i = (ulong)(0); (i) < (prim->draco_mesh_compression.attributes_count); ++i)
            {
                cgltf_attribute* attr = prim->draco_mesh_compression.attributes + i;
                if ((attr->data) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, attr->name, (int)(attr->data - context->data->accessors)));
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }
            }

            cgltf_write_line(context, const_23);
            cgltf_write_line(context, const_23);
        }

        if ((prim->mappings_count) > (0))
        {
            context->extension_flags |= (uint)(1 << 10);
            cgltf_write_line(context, const_24);
            cgltf_write_line(context, const_76);
            for (ulong i = (ulong)(0); (i) < (prim->mappings_count); ++i)
            {
                cgltf_material_mapping* map = prim->mappings + i;
                cgltf_write_line(context, const_3);
                if ((map->material) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_material, (int)(map->material - context->data->materials)));
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_77, (int)(map->variant)));
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
                cgltf_write_extras(context, &map->extras);
                cgltf_write_line(context, const_23);
            }

            cgltf_write_line(context, const_5);
            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_23);
    }
}
public static void cgltf_write_mesh(cgltf_write_context* context, cgltf_mesh* mesh)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, mesh->name);
    cgltf_write_line(context, const_79);
    for (ulong i = (ulong)(0); (i) < (mesh->primitives_count); ++i)
    {
        cgltf_write_line(context, const_3);
        cgltf_write_primitive(context, mesh->primitives + i);
        cgltf_write_line(context, const_23);
    }

    cgltf_write_line(context, const_5);
    if ((mesh->weights_count) > (0))
    {
        cgltf_write_floatarrayprop(context, const_weights, mesh->weights, (ulong)(mesh->weights_count));
    }

    cgltf_write_extras(context, &mesh->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_buffer_view(cgltf_write_context* context, cgltf_buffer_view* view)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, view->name);
    if ((view->buffer) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_buffer, (int)(view->buffer - context->data->buffers)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_sizeprop(context, const_byteLength, (ulong)(view->size), unchecked((ulong)(-1)));
    cgltf_write_sizeprop(context, const_byteOffset, (ulong)(view->offset), (ulong)(0));
    cgltf_write_sizeprop(context, const_byteStride, (ulong)(view->stride), (ulong)(0));
    cgltf_write_extras(context, &view->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_buffer(cgltf_write_context* context, cgltf_buffer* buffer)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, buffer->name);
    cgltf_write_strprop(context, const_uri, buffer->uri);
    cgltf_write_sizeprop(context, const_byteLength, (ulong)(buffer->size), unchecked((ulong)(-1)));
    cgltf_write_extras(context, &buffer->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_material(cgltf_write_context* context, cgltf_material* material)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, material->name);
    if ((material->alpha_mode) == (cgltf_alpha_mode.cgltf_alpha_mode_mask))
    {
        cgltf_write_floatprop(context, const_alphaCutoff, (float)(material->alpha_cutoff), (float)(0.5f));
    }

    cgltf_write_boolprop_optional(context, const_doubleSided, (bool)(material->double_sided > 0 ? true : false), (bool)(false));
    if ((material->unlit) != 0)
    {
        context->extension_flags |= (uint)(1 << 1);
    }

    if ((material->has_pbr_specular_glossiness) != 0)
    {
        context->extension_flags |= (uint)(1 << 2);
    }

    if ((material->has_clearcoat) != 0)
    {
        context->extension_flags |= (uint)(1 << 5);
    }

    if ((material->has_transmission) != 0)
    {
        context->extension_flags |= (uint)(1 << 8);
    }

    if ((material->has_volume) != 0)
    {
        context->extension_flags |= (uint)(1 << 11);
    }

    if ((material->has_ior) != 0)
    {
        context->extension_flags |= (uint)(1 << 6);
    }

    if ((material->has_specular) != 0)
    {
        context->extension_flags |= (uint)(1 << 7);
    }

    if ((material->has_sheen) != 0)
    {
        context->extension_flags |= (uint)(1 << 9);
    }

    if ((material->has_emissive_strength) != 0)
    {
        context->extension_flags |= (uint)(1 << 13);
    }

    if ((material->has_iridescence) != 0)
    {
        context->extension_flags |= (uint)(1 << 15);
    }

    if ((material->has_diffuse_transmission) != 0)
    {
        context->extension_flags |= (uint)(1 << 19);
    }

    if ((material->has_anisotropy) != 0)
    {
        context->extension_flags |= (uint)(1 << 16);
    }

    if ((material->has_dispersion) != 0)
    {
        context->extension_flags |= (uint)(1 << 17);
    }

    if ((material->has_pbr_metallic_roughness) != 0)
    {
        cgltf_pbr_metallic_roughness *  @params 
        = &material->pbr_metallic_roughness;
        cgltf_write_line(context, const_88);
        if ((@params  ->base_color_texture.texture) != null)
        {
            cgltf_write_line(context, const_89);
            if ((@params  ->base_color_texture.texture) != null)
            {
                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->base_color_texture.texture - context->data->textures)) )
                    ;
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
            }

            cgltf_write_intprop(context, const_texCoord, (int)( @params  ->base_color_texture.texcoord) , 
            (int)(0) )
            ;
            if ((@params  ->base_color_texture.has_transform) != 0)
            {
                context->extension_flags |= (uint)(1 << 0);
                cgltf_write_texture_transform(context, & @params  -> base_color_texture.transform);
            }

            cgltf_write_line(context, const_23);
        }

        if ((@params  ->metallic_roughness_texture.texture) != null)
        {
            cgltf_write_line(context, const_91);
            if ((@params  ->metallic_roughness_texture.texture) != null)
            {
                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->metallic_roughness_texture.texture - context->data->textures)) )
                    ;
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
            }

            cgltf_write_intprop(context, const_texCoord, (int)( @params  ->metallic_roughness_texture.texcoord) , 
            (int)(0) )
            ;
            if ((@params  ->metallic_roughness_texture.has_transform) != 0)
            {
                context->extension_flags |= (uint)(1 << 0);
                cgltf_write_texture_transform(context, & @params  -> metallic_roughness_texture.transform);
            }

            cgltf_write_line(context, const_23);
        }

        cgltf_write_floatprop(context, const_metallicFactor, (float)( @params  ->metallic_factor) , 
        (float)(1.0f) )
        ;
        cgltf_write_floatprop(context, const_roughnessFactor, (float)( @params  ->roughness_factor) , 
        (float)(1.0f) )
        ;
        if ((cgltf_check_floatarray (@params  ->base_color_factor, (int)(4) , 
        (float)(1.0f) ) ) 
        != 0 )
        {
            cgltf_write_floatarrayprop(context, const_baseColorFactor,  @params  -> base_color_factor, (ulong)(4));
        }

        cgltf_write_line(context, const_23);
    }

    if ((((((((((((((material->unlit) != 0) || ((material->has_pbr_specular_glossiness) != 0)) || ((material->has_clearcoat) != 0)) || ((material->has_ior) != 0)) || ((material->has_specular) != 0)) || ((material->has_transmission) != 0)) || ((material->has_sheen) != 0)) || ((material->has_volume) != 0)) || ((material->has_emissive_strength) != 0)) || ((material->has_iridescence) != 0)) || ((material->has_anisotropy) != 0)) || ((material->has_dispersion) != 0)) || ((material->has_diffuse_transmission) != 0))
    {
        cgltf_write_line(context, const_20);
        if ((material->has_clearcoat) != 0)
        {
            cgltf_clearcoat *  @params 
            = &material->clearcoat;
            cgltf_write_line(context, const_95);
            if ((@params  ->clearcoat_texture.texture) != null)
            {
                cgltf_write_line(context, const_96);
                if ((@params  ->clearcoat_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->clearcoat_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->clearcoat_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->clearcoat_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> clearcoat_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((@params  ->clearcoat_roughness_texture.texture) != null)
            {
                cgltf_write_line(context, const_97);
                if ((@params  ->clearcoat_roughness_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->clearcoat_roughness_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->clearcoat_roughness_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->clearcoat_roughness_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> clearcoat_roughness_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((@params  ->clearcoat_normal_texture.texture) != null)
            {
                cgltf_write_line(context, const_98);
                if ((@params  ->clearcoat_normal_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->clearcoat_normal_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->clearcoat_normal_texture.texcoord) , 
                (int)(0) )
                ;
                cgltf_write_floatprop(context, const_scale, (float)( @params  ->clearcoat_normal_texture.scale) , 
                (float)(1.0f) )
                ;
                if ((@params  ->clearcoat_normal_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> clearcoat_normal_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_clearcoatFactor, (float)( @params  ->clearcoat_factor) , 
            (float)(0.0f) )
            ;
            cgltf_write_floatprop(context, const_clearcoatRoughnessFactor, (float)( @params  ->clearcoat_roughness_factor) , 
            (float)(0.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->has_ior) != 0)
        {
            cgltf_ior *  @params 
            = &material->ior;
            cgltf_write_line(context, const_101);
            cgltf_write_floatprop(context, const_ior, (float)( @params  ->ior) , 
            (float)(1.5f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->has_specular) != 0)
        {
            cgltf_specular *  @params 
            = &material->specular;
            cgltf_write_line(context, const_103);
            if ((@params  ->specular_texture.texture) != null)
            {
                cgltf_write_line(context, const_104);
                if ((@params  ->specular_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->specular_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->specular_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->specular_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> specular_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((@params  ->specular_color_texture.texture) != null)
            {
                cgltf_write_line(context, const_105);
                if ((@params  ->specular_color_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->specular_color_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->specular_color_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->specular_color_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> specular_color_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_specularFactor, (float)( @params  ->specular_factor) , 
            (float)(1.0f) )
            ;
            if ((cgltf_check_floatarray (@params  ->specular_color_factor, (int)(3) , 
            (float)(1.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_specularColorFactor,  @params  -> specular_color_factor, (ulong)(3));
            }

            cgltf_write_line(context, const_23);
        }

        if ((material->has_transmission) != 0)
        {
            cgltf_transmission *  @params 
            = &material->transmission;
            cgltf_write_line(context, const_108);
            if ((@params  ->transmission_texture.texture) != null)
            {
                cgltf_write_line(context, const_109);
                if ((@params  ->transmission_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->transmission_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->transmission_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->transmission_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> transmission_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_transmissionFactor, (float)( @params  ->transmission_factor) , 
            (float)(0.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->has_volume) != 0)
        {
            cgltf_volume *  @params 
            = &material->volume;
            cgltf_write_line(context, const_111);
            if ((@params  ->thickness_texture.texture) != null)
            {
                cgltf_write_line(context, const_112);
                if ((@params  ->thickness_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->thickness_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->thickness_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->thickness_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> thickness_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_thicknessFactor, (float)( @params  ->thickness_factor) , 
            (float)(0.0f) )
            ;
            if ((cgltf_check_floatarray (@params  ->attenuation_color, (int)(3) , 
            (float)(1.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_attenuationColor,  @params  -> attenuation_color, (ulong)(3));
            }

            if ((@params  ->attenuation_distance) < (0))
            {
                cgltf_write_floatprop(context, const_attenuationDistance, (float)( @params  ->attenuation_distance) , 
                (float)(0) )
                ;
            }

            cgltf_write_line(context, const_23);
        }

        if ((material->has_sheen) != 0)
        {
            cgltf_sheen *  @params 
            = &material->sheen;
            cgltf_write_line(context, const_116);
            if ((@params  ->sheen_color_texture.texture) != null)
            {
                cgltf_write_line(context, const_117);
                if ((@params  ->sheen_color_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->sheen_color_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->sheen_color_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->sheen_color_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> sheen_color_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((@params  ->sheen_roughness_texture.texture) != null)
            {
                cgltf_write_line(context, const_118);
                if ((@params  ->sheen_roughness_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->sheen_roughness_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->sheen_roughness_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->sheen_roughness_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> sheen_roughness_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((cgltf_check_floatarray (@params  ->sheen_color_factor, (int)(3) , 
            (float)(0.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_sheenColorFactor,  @params  -> sheen_color_factor, (ulong)(3));
            }

            cgltf_write_floatprop(context, const_sheenRoughnessFactor, (float)( @params  ->sheen_roughness_factor) , 
            (float)(0.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->has_pbr_specular_glossiness) != 0)
        {
            cgltf_pbr_specular_glossiness *  @params 
            = &material->pbr_specular_glossiness;
            cgltf_write_line(context, const_121);
            if ((@params  ->diffuse_texture.texture) != null)
            {
                cgltf_write_line(context, const_122);
                if ((@params  ->diffuse_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->diffuse_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->diffuse_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->diffuse_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> diffuse_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((@params  ->specular_glossiness_texture.texture) != null)
            {
                cgltf_write_line(context, const_123);
                if ((@params  ->specular_glossiness_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->specular_glossiness_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->specular_glossiness_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->specular_glossiness_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> specular_glossiness_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            if ((cgltf_check_floatarray (@params  ->diffuse_factor, (int)(4) , 
            (float)(1.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_diffuseFactor,  @params  -> diffuse_factor, (ulong)(4));
            }

            if ((cgltf_check_floatarray (@params  ->specular_factor, (int)(3) , 
            (float)(1.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_specularFactor,  @params  -> specular_factor, (ulong)(3));
            }

            cgltf_write_floatprop(context, const_glossinessFactor, (float)( @params  ->glossiness_factor) , 
            (float)(1.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->unlit) != 0)
        {
            cgltf_write_line(context, const_126);
        }

        if ((material->has_emissive_strength) != 0)
        {
            cgltf_write_line(context, const_127);
            cgltf_emissive_strength *  @params 
            = &material->emissive_strength;
            cgltf_write_floatprop(context, const_emissiveStrength, (float)( @params  ->emissive_strength) , 
            (float)(1.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        if ((material->has_iridescence) != 0)
        {
            cgltf_write_line(context, const_129);
            cgltf_iridescence *  @params 
            = &material->iridescence;
            cgltf_write_floatprop(context, const_iridescenceFactor, (float)( @params  ->iridescence_factor) , 
            (float)(0.0f) )
            ;
            if ((@params  ->iridescence_texture.texture) != null)
            {
                cgltf_write_line(context, const_131);
                if ((@params  ->iridescence_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->iridescence_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->iridescence_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->iridescence_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> iridescence_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_iridescenceIor, (float)( @params  ->iridescence_ior) , 
            (float)(1.3f) )
            ;
            cgltf_write_floatprop(context, const_iridescenceThicknessMinimum, (float)( @params  ->iridescence_thickness_min) , 
            (float)(100.0f) )
            ;
            cgltf_write_floatprop(context, const_iridescenceThicknessMaximum, (float)( @params  ->iridescence_thickness_max) , 
            (float)(400.0f) )
            ;
            if ((@params  ->iridescence_thickness_texture.texture) != null)
            {
                cgltf_write_line(context, const_135);
                if ((@params  ->iridescence_thickness_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->iridescence_thickness_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->iridescence_thickness_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->iridescence_thickness_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> iridescence_thickness_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_line(context, const_23);
        }

        if ((material->has_diffuse_transmission) != 0)
        {
            cgltf_diffuse_transmission *  @params 
            = &material->diffuse_transmission;
            cgltf_write_line(context, const_136);
            if ((@params  ->diffuse_transmission_texture.texture) != null)
            {
                cgltf_write_line(context, const_137);
                if ((@params  ->diffuse_transmission_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->diffuse_transmission_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->diffuse_transmission_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->diffuse_transmission_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> diffuse_transmission_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_floatprop(context, const_diffuseTransmissionFactor, (float)( @params  ->diffuse_transmission_factor) , 
            (float)(0.0f) )
            ;
            if ((cgltf_check_floatarray (@params  ->diffuse_transmission_color_factor, (int)(3) , 
            (float)(1.0f) ) ) 
            != 0 )
            {
                cgltf_write_floatarrayprop(context, const_diffuseTransmissionColorFactor,  @params  -> diffuse_transmission_color_factor, (ulong)(3));
            }

            if ((@params  ->diffuse_transmission_color_texture.texture) != null)
            {
                cgltf_write_line(context, const_140);
                if ((@params  ->diffuse_transmission_color_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->diffuse_transmission_color_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->diffuse_transmission_color_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->diffuse_transmission_color_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> diffuse_transmission_color_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_line(context, const_23);
        }

        if ((material->has_anisotropy) != 0)
        {
            cgltf_write_line(context, const_141);
            cgltf_anisotropy *  @params 
            = &material->anisotropy;
            cgltf_write_floatprop(context, const_anisotropyFactor, (float)( @params  ->anisotropy_strength) , 
            (float)(0.0f) )
            ;
            cgltf_write_floatprop(context, const_anisotropyRotation, (float)( @params  ->anisotropy_rotation) , 
            (float)(0.0f) )
            ;
            if ((@params  ->anisotropy_texture.texture) != null)
            {
                cgltf_write_line(context, const_144);
                if ((@params  ->anisotropy_texture.texture) != null)
                {
                    cgltf_write_indent(context);
                    {
                        context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)( @params  ->anisotropy_texture.texture - context->data->textures)) )
                        ;
                        context->chars_written += (ulong)(context->tmp);
                        if ((context->cursor) != null)
                        {
                            context->cursor += context->tmp;
                            context->remaining -= (ulong)(context->tmp);
                        }
                    }

                    context->needs_comma = (int)(1);
                }

                cgltf_write_intprop(context, const_texCoord, (int)( @params  ->anisotropy_texture.texcoord) , 
                (int)(0) )
                ;
                if ((@params  ->anisotropy_texture.has_transform) != 0)
                {
                    context->extension_flags |= (uint)(1 << 0);
                    cgltf_write_texture_transform(context, & @params  -> anisotropy_texture.transform);
                }

                cgltf_write_line(context, const_23);
            }

            cgltf_write_line(context, const_23);
        }

        if ((material->has_dispersion) != 0)
        {
            cgltf_write_line(context, const_145);
            cgltf_dispersion *  @params 
            = &material->dispersion;
            cgltf_write_floatprop(context, const_dispersion, (float)( @params  ->dispersion) , 
            (float)(0.0f) )
            ;
            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_23);
    }

    if ((material->normal_texture.texture) != null)
    {
        cgltf_write_line(context, const_147);
        if ((material->normal_texture.texture) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)(material->normal_texture.texture - context->data->textures)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_intprop(context, const_texCoord, (int)(material->normal_texture.texcoord), (int)(0));
        cgltf_write_floatprop(context, const_scale, (float)(material->normal_texture.scale), (float)(1.0f));
        if ((material->normal_texture.has_transform) != 0)
        {
            context->extension_flags |= (uint)(1 << 0);
            cgltf_write_texture_transform(context, &material->normal_texture.transform);
        }

        cgltf_write_line(context, const_23);
    }

    if ((material->occlusion_texture.texture) != null)
    {
        cgltf_write_line(context, const_148);
        if ((material->occlusion_texture.texture) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)(material->occlusion_texture.texture - context->data->textures)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_intprop(context, const_texCoord, (int)(material->occlusion_texture.texcoord), (int)(0));
        cgltf_write_floatprop(context, const_strength, (float)(material->occlusion_texture.scale), (float)(1.0f));
        if ((material->occlusion_texture.has_transform) != 0)
        {
            context->extension_flags |= (uint)(1 << 0);
            cgltf_write_texture_transform(context, &material->occlusion_texture.transform);
        }

        cgltf_write_line(context, const_23);
    }

    if ((material->emissive_texture.texture) != null)
    {
        cgltf_write_line(context, const_150);
        if ((material->emissive_texture.texture) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_index, (int)(material->emissive_texture.texture - context->data->textures)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_intprop(context, const_texCoord, (int)(material->emissive_texture.texcoord), (int)(0));
        if ((material->emissive_texture.has_transform) != 0)
        {
            context->extension_flags |= (uint)(1 << 0);
            cgltf_write_texture_transform(context, &material->emissive_texture.transform);
        }

        cgltf_write_line(context, const_23);
    }

    if ((cgltf_check_floatarray(material->emissive_factor, (int)(3), (float)(0.0f))) != 0)
    {
        cgltf_write_floatarrayprop(context, const_emissiveFactor, material->emissive_factor, (ulong)(3));
    }

    cgltf_write_strprop(context, const_alphaMode, cgltf_str_from_alpha_mode((cgltf_alpha_mode)(material->alpha_mode)));
    cgltf_write_extras(context, &material->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_image(cgltf_write_context* context, cgltf_image* image)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, image->name);
    cgltf_write_strprop(context, const_uri, image->uri);
    if ((image->buffer_view) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_bufferView, (int)(image->buffer_view - context->data->buffer_views)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_strprop(context, const_mimeType, image->mime_type);
    cgltf_write_extras(context, &image->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_texture(cgltf_write_context* context, cgltf_texture* texture)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, texture->name);
    if ((texture->image) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_source, (int)(texture->image - context->data->images)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((texture->sampler) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_sampler, (int)(texture->sampler - context->data->samplers)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if (((texture->has_basisu) != 0) || ((texture->has_webp) != 0))
    {
        cgltf_write_line(context, const_20);
        if ((texture->has_basisu) != 0)
        {
            context->extension_flags |= (uint)(1 << 12);
            cgltf_write_line(context, const_156);
            if ((texture->basisu_image) != null)
            {
                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_source, (int)(texture->basisu_image - context->data->images)));
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
            }

            cgltf_write_line(context, const_23);
        }

        if ((texture->has_webp) != 0)
        {
            context->extension_flags |= (uint)(1 << 18);
            cgltf_write_line(context, const_157);
            if ((texture->webp_image) != null)
            {
                cgltf_write_indent(context);
                {
                    context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_source, (int)(texture->webp_image - context->data->images)));
                    context->chars_written += (ulong)(context->tmp);
                    if ((context->cursor) != null)
                    {
                        context->cursor += context->tmp;
                        context->remaining -= (ulong)(context->tmp);
                    }
                }

                context->needs_comma = (int)(1);
            }

            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_23);
    }

    cgltf_write_extras(context, &texture->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_skin(cgltf_write_context* context, cgltf_skin* skin)
{
    cgltf_write_line(context, const_3);
    if ((skin->skeleton) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_skeleton, (int)(skin->skeleton - context->data->nodes)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((skin->inverse_bind_matrices) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_inverseBindMatrices, (int)(skin->inverse_bind_matrices - context->data->accessors)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((skin->joints) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_43, const_joints));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        for (int i = (int)(0); (i) < ((int)(skin->joints_count)); ++i)
        {
            int idx = (int)(skin->joints[i] - context->data->nodes);
            if (i != 0)
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_161));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_162, (int)(idx)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }
        }

        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_163));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_strprop(context, const_name, skin->name);
    cgltf_write_extras(context, &skin->extras);
    cgltf_write_line(context, const_23);
}
public static sbyte* cgltf_write_str_path_type(cgltf_animation_path_type path_type)
{
    switch (path_type)
    {
        case cgltf_animation_path_type.cgltf_animation_path_type_translation:
            return const_translation;
        case cgltf_animation_path_type.cgltf_animation_path_type_rotation:
            return const_rotation;
        case cgltf_animation_path_type.cgltf_animation_path_type_scale:
            return const_scale;
        case cgltf_animation_path_type.cgltf_animation_path_type_weights:
            return const_weights;
        default:
            break;
    }

    return const_invalid;
}
public static sbyte* cgltf_write_str_interpolation_type(cgltf_interpolation_type interpolation_type)
{
    switch (interpolation_type)
    {
        case cgltf_interpolation_type.cgltf_interpolation_type_linear:
            return const_LINEAR;
        case cgltf_interpolation_type.cgltf_interpolation_type_step:
            return const_STEP;
        case cgltf_interpolation_type.cgltf_interpolation_type_cubic_spline:
            return const_CUBICSPLINE;
        default:
            break;
    }

    return const_invalid;
}
public static void cgltf_write_path_type(cgltf_write_context* context, sbyte* label, cgltf_animation_path_type path_type)
{
    cgltf_write_strprop(context, label, cgltf_write_str_path_type((cgltf_animation_path_type)(path_type)));
}
public static void cgltf_write_interpolation_type(cgltf_write_context* context, sbyte* label, cgltf_interpolation_type interpolation_type)
{
    cgltf_write_strprop(context, label, cgltf_write_str_interpolation_type((cgltf_interpolation_type)(interpolation_type)));
}
public static void cgltf_write_animation_sampler(cgltf_write_context* context, cgltf_animation_sampler* animation_sampler)
{
    cgltf_write_line(context, const_3);
    cgltf_write_interpolation_type(context, const_interpolation, (cgltf_interpolation_type)(animation_sampler->interpolation));
    if ((animation_sampler->input) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_input, (int)(animation_sampler->input - context->data->accessors)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((animation_sampler->output) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_output, (int)(animation_sampler->output - context->data->accessors)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_extras(context, &animation_sampler->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_animation_channel(cgltf_write_context* context, cgltf_animation* animation, cgltf_animation_channel* animation_channel)
{
    cgltf_write_line(context, const_3);
    if ((animation_channel->sampler) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_sampler, (int)(animation_channel->sampler - animation->samplers)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_line(context, const_172);
    if ((animation_channel->target_node) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_node, (int)(animation_channel->target_node - context->data->nodes)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_path_type(context, const_path, (cgltf_animation_path_type)(animation_channel->target_path));
    cgltf_write_line(context, const_23);
    cgltf_write_extras(context, &animation_channel->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_animation(cgltf_write_context* context, cgltf_animation* animation)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, animation->name);
    if ((animation->samplers_count) > (0))
    {
        cgltf_write_line(context, const_12);
        for (ulong i = (ulong)(0); (i) < (animation->samplers_count); ++i)
        {
            cgltf_write_animation_sampler(context, animation->samplers + i);
        }

        cgltf_write_line(context, const_5);
    }

    if ((animation->channels_count) > (0))
    {
        cgltf_write_line(context, const_175);
        for (ulong i = (ulong)(0); (i) < (animation->channels_count); ++i)
        {
            cgltf_write_animation_channel(context, animation, animation->channels + i);
        }

        cgltf_write_line(context, const_5);
    }

    cgltf_write_extras(context, &animation->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_sampler(cgltf_write_context* context, cgltf_sampler* sampler)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, sampler->name);
    cgltf_write_intprop(context, const_magFilter, (int)(sampler->mag_filter), (int)(0));
    cgltf_write_intprop(context, const_minFilter, (int)(sampler->min_filter), (int)(0));
    cgltf_write_intprop(context, const_wrapS, (int)(sampler->wrap_s), (int)(10497));
    cgltf_write_intprop(context, const_wrapT, (int)(sampler->wrap_t), (int)(10497));
    cgltf_write_extras(context, &sampler->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_node(cgltf_write_context* context, cgltf_node* node)
{
    cgltf_write_line(context, const_3);
    if ((node->children) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_43, const_children));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        for (int i = (int)(0); (i) < ((int)(node->children_count)); ++i)
        {
            int idx = (int)(node->children[i] - context->data->nodes);
            if (i != 0)
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_161));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_162, (int)(idx)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }
        }

        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_163));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    if ((node->mesh) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_mesh, (int)(node->mesh - context->data->meshes)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_strprop(context, const_name, node->name);
    if ((node->has_matrix) != 0)
    {
        cgltf_write_floatarrayprop(context, const_matrix, node->matrix, (ulong)(16));
    }

    if ((node->has_translation) != 0)
    {
        cgltf_write_floatarrayprop(context, const_translation, node->translation, (ulong)(3));
    }

    if ((node->has_rotation) != 0)
    {
        cgltf_write_floatarrayprop(context, const_rotation, node->rotation, (ulong)(4));
    }

    if ((node->has_scale) != 0)
    {
        cgltf_write_floatarrayprop(context, const_scale, node->scale, (ulong)(3));
    }

    if ((node->skin) != null)
    {
        if ((node->skin) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_skin, (int)(node->skin - context->data->skins)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }
    }

    bool has_extension = (bool)(((node->light) != null) || (((node->has_mesh_gpu_instancing) != 0) && ((node->mesh_gpu_instancing.attributes_count) > (0))));
    if ((has_extension) != false)
        cgltf_write_line(context, const_20);
    if ((node->light) != null)
    {
        context->extension_flags |= (uint)(1 << 3);
        cgltf_write_line(context, const_21);
        if ((node->light) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_light, (int)(node->light - context->data->lights)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_line(context, const_23);
    }

    if (((node->has_mesh_gpu_instancing) != 0) && ((node->mesh_gpu_instancing.attributes_count) > (0)))
    {
        context->extension_flags |= (uint)(1 << 14);
        context->required_extension_flags |= (uint)(1 << 14);
        cgltf_write_line(context, const_185);
        {
            cgltf_write_line(context, const_72);
            {
                for (ulong i = (ulong)(0); (i) < (node->mesh_gpu_instancing.attributes_count); ++i)
                {
                    cgltf_attribute* attr = node->mesh_gpu_instancing.attributes + i;
                    if ((attr->data) != null)
                    {
                        cgltf_write_indent(context);
                        {
                            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, attr->name, (int)(attr->data - context->data->accessors)));
                            context->chars_written += (ulong)(context->tmp);
                            if ((context->cursor) != null)
                            {
                                context->cursor += context->tmp;
                                context->remaining -= (ulong)(context->tmp);
                            }
                        }

                        context->needs_comma = (int)(1);
                    }
                }
            }

            cgltf_write_line(context, const_23);
        }

        cgltf_write_line(context, const_23);
    }

    if ((has_extension) != false)
        cgltf_write_line(context, const_23);
    if ((node->weights_count) > (0))
    {
        cgltf_write_floatarrayprop(context, const_weights, node->weights, (ulong)(node->weights_count));
    }

    if ((node->camera) != null)
    {
        if ((node->camera) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_camera, (int)(node->camera - context->data->cameras)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }
    }

    cgltf_write_extras(context, &node->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_scene(cgltf_write_context* context, cgltf_scene* scene)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, scene->name);
    if ((scene->nodes) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_43, const_nodes));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        for (int i = (int)(0); (i) < ((int)(scene->nodes_count)); ++i)
        {
            int idx = (int)(scene->nodes[i] - context->data->nodes);
            if (i != 0)
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_161));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_162, (int)(idx)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }
        }

        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_163));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_extras(context, &scene->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_accessor(cgltf_write_context* context, cgltf_accessor* accessor)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, accessor->name);
    if ((accessor->buffer_view) != null)
    {
        cgltf_write_indent(context);
        {
            context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_bufferView, (int)(accessor->buffer_view - context->data->buffer_views)));
            context->chars_written += (ulong)(context->tmp);
            if ((context->cursor) != null)
            {
                context->cursor += context->tmp;
                context->remaining -= (ulong)(context->tmp);
            }
        }

        context->needs_comma = (int)(1);
    }

    cgltf_write_intprop(context, const_componentType, (int)(cgltf_int_from_component_type((cgltf_component_type)(accessor->component_type))), (int)(0));
    cgltf_write_strprop(context, const_type, cgltf_str_from_type((cgltf_type)(accessor->type)));
    ulong dim = (ulong)(cgltf_dim_from_type((cgltf_type)(accessor->type)));
    cgltf_write_boolprop_optional(context, const_normalized, (bool)(accessor->normalized > 0 ? true : false), (bool)(false));
    cgltf_write_sizeprop(context, const_byteOffset, (ulong)((int)(accessor->offset)), (ulong)(0));
    cgltf_write_intprop(context, const_count, (int)(accessor->count), (int)(-1));
    if ((accessor->has_min) != 0)
    {
        cgltf_write_floatarrayprop(context, const_min, accessor->min, (ulong)(dim));
    }

    if ((accessor->has_max) != 0)
    {
        cgltf_write_floatarrayprop(context, const_max, accessor->max, (ulong)(dim));
    }

    if ((accessor->is_sparse) != 0)
    {
        cgltf_write_line(context, const_194);
        cgltf_write_intprop(context, const_count, (int)(accessor->sparse.count), (int)(0));
        cgltf_write_line(context, const_195);
        cgltf_write_sizeprop(context, const_byteOffset, (ulong)((int)(accessor->sparse.indices_byte_offset)), (ulong)(0));
        if ((accessor->sparse.indices_buffer_view) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_bufferView, (int)(accessor->sparse.indices_buffer_view - context->data->buffer_views)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_intprop(context, const_componentType, (int)(cgltf_int_from_component_type((cgltf_component_type)(accessor->sparse.indices_component_type))), (int)(0));
        cgltf_write_line(context, const_23);
        cgltf_write_line(context, const_196);
        cgltf_write_sizeprop(context, const_byteOffset, (ulong)((int)(accessor->sparse.values_byte_offset)), (ulong)(0));
        if ((accessor->sparse.values_buffer_view) != null)
        {
            cgltf_write_indent(context);
            {
                context->tmp = (ulong)(CRuntime.snprintf(context->cursor, (ulong)(context->remaining), const_13, const_bufferView, (int)(accessor->sparse.values_buffer_view - context->data->buffer_views)));
                context->chars_written += (ulong)(context->tmp);
                if ((context->cursor) != null)
                {
                    context->cursor += context->tmp;
                    context->remaining -= (ulong)(context->tmp);
                }
            }

            context->needs_comma = (int)(1);
        }

        cgltf_write_line(context, const_23);
        cgltf_write_line(context, const_23);
    }

    cgltf_write_extras(context, &accessor->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_camera(cgltf_write_context* context, cgltf_camera* camera)
{
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_type, cgltf_str_from_camera_type((cgltf_camera_type)(camera->type)));
    if ((camera->name) != null)
    {
        cgltf_write_strprop(context, const_name, camera->name);
    }

    if ((camera->type) == (cgltf_camera_type.cgltf_camera_type_orthographic))
    {
        cgltf_write_line(context, const_197);
        cgltf_write_floatprop(context, const_xmag, (float)(camera->data.orthographic.xmag), (float)(-1.0f));
        cgltf_write_floatprop(context, const_ymag, (float)(camera->data.orthographic.ymag), (float)(-1.0f));
        cgltf_write_floatprop(context, const_zfar, (float)(camera->data.orthographic.zfar), (float)(-1.0f));
        cgltf_write_floatprop(context, const_znear, (float)(camera->data.orthographic.znear), (float)(-1.0f));
        cgltf_write_extras(context, &camera->data.orthographic.extras);
        cgltf_write_line(context, const_23);
    }
    else if ((camera->type) == (cgltf_camera_type.cgltf_camera_type_perspective))
    {
        cgltf_write_line(context, const_202);
        if ((camera->data.perspective.has_aspect_ratio) != 0)
        {
            cgltf_write_floatprop(context, const_aspectRatio, (float)(camera->data.perspective.aspect_ratio), (float)(-1.0f));
        }

        cgltf_write_floatprop(context, const_yfov, (float)(camera->data.perspective.yfov), (float)(-1.0f));
        if ((camera->data.perspective.has_zfar) != 0)
        {
            cgltf_write_floatprop(context, const_zfar, (float)(camera->data.perspective.zfar), (float)(-1.0f));
        }

        cgltf_write_floatprop(context, const_znear, (float)(camera->data.perspective.znear), (float)(-1.0f));
        cgltf_write_extras(context, &camera->data.perspective.extras);
        cgltf_write_line(context, const_23);
    }

    cgltf_write_extras(context, &camera->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_light(cgltf_write_context* context, cgltf_light* light)
{
    context->extension_flags |= (uint)(1 << 3);
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_type, cgltf_str_from_light_type((cgltf_light_type)(light->type)));
    if ((light->name) != null)
    {
        cgltf_write_strprop(context, const_name, light->name);
    }

    if ((cgltf_check_floatarray(light->color, (int)(3), (float)(1.0f))) != 0)
    {
        cgltf_write_floatarrayprop(context, const_color, light->color, (ulong)(3));
    }

    cgltf_write_floatprop(context, const_intensity, (float)(light->intensity), (float)(1.0f));
    cgltf_write_floatprop(context, const_range, (float)(light->range), (float)(0.0f));
    if ((light->type) == (cgltf_light_type.cgltf_light_type_spot))
    {
        cgltf_write_line(context, const_208);
        cgltf_write_floatprop(context, const_innerConeAngle, (float)(light->spot_inner_cone_angle), (float)(0.0f));
        cgltf_write_floatprop(context, const_outerConeAngle, (float)(light->spot_outer_cone_angle), (float)(3.14159265358979323846f / 4.0f));
        cgltf_write_line(context, const_23);
    }

    cgltf_write_extras(context, &light->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_variant(cgltf_write_context* context, cgltf_material_variant* variant)
{
    context->extension_flags |= (uint)(1 << 10);
    cgltf_write_line(context, const_3);
    cgltf_write_strprop(context, const_name, variant->name);
    cgltf_write_extras(context, &variant->extras);
    cgltf_write_line(context, const_23);
}
public static void cgltf_write_extensions(cgltf_write_context* context, uint extension_flags)
{
    if ((extension_flags & (1 << 0)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_texture_transform);
    }

    if ((extension_flags & (1 << 1)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_unlit);
    }

    if ((extension_flags & (1 << 2)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_pbrSpecularGlossiness);
    }

    if ((extension_flags & (1 << 3)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_lights_punctual);
    }

    if ((extension_flags & (1 << 4)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_draco_mesh_compression);
    }

    if ((extension_flags & (1 << 5)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_clearcoat);
    }

    if ((extension_flags & (1 << 6)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_ior);
    }

    if ((extension_flags & (1 << 7)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_specular);
    }

    if ((extension_flags & (1 << 8)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_transmission);
    }

    if ((extension_flags & (1 << 9)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_sheen);
    }

    if ((extension_flags & (1 << 10)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_variants);
    }

    if ((extension_flags & (1 << 11)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_volume);
    }

    if ((extension_flags & (1 << 12)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_texture_basisu);
    }

    if ((extension_flags & (1 << 18)) != 0)
    {
        cgltf_write_stritem(context, const_EXT_texture_webp);
    }

    if ((extension_flags & (1 << 13)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_emissive_strength);
    }

    if ((extension_flags & (1 << 15)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_iridescence);
    }

    if ((extension_flags & (1 << 19)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_diffuse_transmission);
    }

    if ((extension_flags & (1 << 16)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_anisotropy);
    }

    if ((extension_flags & (1 << 14)) != 0)
    {
        cgltf_write_stritem(context, const_EXT_mesh_gpu_instancing);
    }

    if ((extension_flags & (1 << 17)) != 0)
    {
        cgltf_write_stritem(context, const_KHR_materials_dispersion);
    }
}
public static int cgltf_check_floatarray(float* vals, int dim, float val)
{
    while ((dim--) != 0)
    {
        if (vals[dim] != val)
        {
            return 1;
        }
    }
    return 0;
}

public static cgltf_result cgltf_write_file( cgltf_options* options, string path, cgltf_data* data)
    {
        ulong expected = cgltf_write(options, null, 0, data);
        sbyte* buffer = (sbyte*)CRuntime.malloc(expected);
        ulong actual = cgltf_write(options, buffer, expected, data);
        if (expected != actual)
        {
            System.Diagnostics.Trace.TraceError("Error: expected %zu bytes but wrote %zu bytes.\n", expected, actual);
        }

        if (!System.IO.File.Exists(path))
        {
            return cgltf_result.cgltf_result_file_not_found;
        }
        var file = System.IO.File.Open(path, System.IO.FileMode.Open);

        // Note that cgltf_write() includes a null terminator, which we omit from the file content.
        if (options->type == cgltf_file_type.cgltf_file_type_glb)
        {
            cgltf_write_glb(file, buffer, actual - 1, data->bin, data->bin_size);
        }
        else
        {
            // Write a plain JSON file.
            file.Write(new ReadOnlySpan<byte>(buffer, (int)(actual - 1)));
        }
        file.Close();
        CRuntime.free(buffer);
        return cgltf_result.cgltf_result_success;
    }
static void cgltf_write_glb(System.IO.Stream file, void* json_buf, ulong json_size, void* bin_buf, ulong bin_size)
{
    ulong GlbHeaderSize = 12;
    ulong GlbChunkHeaderSize = 8;
    byte[] header = new byte[GlbHeaderSize];
    byte[] chunk_header = new byte[GlbChunkHeaderSize];
    byte[] json_pad = new byte[] { 0x20, 0x20, 0x20 };
    byte[] bin_pad = new byte[] { 0, 0, 0 };

    ulong json_padsize = (json_size % 4 != 0) ? 4 - json_size % 4 : 0;
    ulong bin_padsize = (bin_size % 4 != 0) ? 4 - bin_size % 4 : 0;
    ulong total_size = GlbHeaderSize + GlbChunkHeaderSize + json_size + json_padsize;
    if (bin_buf != null && bin_size > 0)
    {
        total_size += GlbChunkHeaderSize + bin_size + bin_padsize;
    }

    // Write a GLB header
    fixed (byte* headerPtr = header)
    {
        fixed (uint* p = &GlbMagic)
            CRuntime.memcpy(headerPtr, p, 4);
        fixed (uint* p = &GlbVersion)
            CRuntime.memcpy(headerPtr + 4, p, 4);
        CRuntime.memcpy(headerPtr + 8, &total_size, 4);
        file.Write(header, 0, (int)GlbHeaderSize);
    }

    file.Seek(0, System.IO.SeekOrigin.End);// 将文件流的当前位置设置为文件的末尾

    // Write a JSON chunk (header & data)
    fixed (byte* chunk_headerPtr = chunk_header)
    {
        ulong json_chunk_size = (ulong)(json_size + json_padsize);
        CRuntime.memcpy(chunk_headerPtr, &json_chunk_size, 4);
        fixed (uint* p = &GlbVersion)
            CRuntime.memcpy(chunk_headerPtr + 4, p, 4);
        file.Write(chunk_header, 0, (int)GlbChunkHeaderSize); file.Seek(0, System.IO.SeekOrigin.End);
        file.Write(new ReadOnlySpan<byte>(json_buf, (int)json_size)); file.Seek(0, System.IO.SeekOrigin.End);
        file.Write(json_pad, 0, (int)json_padsize); file.Seek(0, System.IO.SeekOrigin.End);

        if (bin_buf != null && bin_size > 0)
        {
            // Write a binary chunk (header & data)
            ulong bin_chunk_size = (ulong)(bin_size + bin_padsize);
            CRuntime.memcpy(chunk_headerPtr, &bin_chunk_size, 4);
            fixed (uint* p = &GlbMagicBinChunk)
                CRuntime.memcpy(chunk_headerPtr + 4, p, 4);
            file.Write(chunk_header, 0, (int)GlbChunkHeaderSize); file.Seek(0, System.IO.SeekOrigin.End);
        }
    }


    file.Write(new ReadOnlySpan<byte>(bin_buf, (int)bin_size)); file.Seek(0, System.IO.SeekOrigin.End);
    file.Write(bin_pad, 0, (int)bin_padsize); file.Seek(0, System.IO.SeekOrigin.End);
}
}